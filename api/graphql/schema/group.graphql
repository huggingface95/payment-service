"""
Список групп
Settings->Manager Groups->Groups List
"""
enum GroupsEntities {
    Member @enum(value: Member)
    Company @enum(value: Company)
    Individual @enum(value: Individual)
}


"Группы"
type GroupType{
    id: ID!
    "Название группы"
    name: GroupsEntities!
}

type Groups {
    id: ID!
    "Название группы"
    name: GroupsEntities!
    groups: [GroupRole] @hasMany(relation: "groups") @deprecated
}


type GroupRole {
    id: ID!
    "Название группы"
    name: String
    "ID типа группы"
    group_type_id: ID
    "ID роли"
    role_id: ID
    "ID модуля"
    module_id: ID
    "Описание группы"
    description: String
    "Активная и не активная группа"
    is_active: Boolean
    "Получить тип группы"
    group_type: GroupType @belongsTo(relation: "groupType")
    "Получить связанную роль"
    role: Role @belongsTo(relation: "role")
    "Получить связанный платежный провайдер"
    payment_provider: PaymentProvider @belongsTo(relation: "paymentProvider")
    "Получит свящанный шаблон комиссий"
    commission_template: CommissionTemplate @belongsTo(relation: "commissionTemplate")
    company: Company @belongsTo(relation: "company")
    "Получить связанный модуль"
    module: ApplicantModules @belongsTo(relation: "modules")
}


extend type Query @guard {
    "Получить группу по ID"
    group_type(id: ID @eq): GroupType   @find
    "Получить список типов групп"
    group_types(
        filter: _ @filterConditions(static: QueryGroupTypesFilterStatic),
    ): [GroupType!]! @all @orderBy(column: "id", direction: ASC)
    "Получить список типов групп"
    groupTypeList (mode: GroupTypeMode): [GroupType!]! @paginate(builder: "App\\GraphQL\\Queries\\GroupsTypeQuery", defaultCount:10) @orderBy(column: "id", direction: ASC)
    """
    Получить список групп с ролями
    orderBy: [{ column: IS_ACTIVE, order: DESC }] сортировка по ID, статусу, описанию
    where:{column: ID, operator: EQ, value: ""} фильтр по ID, ID группы, ID роли, ID платежного провайдера, ID шаблона комиссий, по статусу
    """
    groups(
        hasPaymentProvider: _ @whereHasConditions(columns: ["name", "id"]),
        hasCommissionTemplate: _ @whereHasConditions(columns: ["name", "id"]),
        hasGroupType: _ @whereHasConditions(columns: ["name", "id"]),
        hasRole: _ @whereHasConditions(columns: ["name", "id"]),
        hasModule: _ @whereHasConditions(columns: ["name", "id"]),
        where: _ @whereConditions(columns: ["id","group_type_id", "name","role_id", "payment_provider_id", "commission_template_id", "is_active","company_id", "module_id"]),
        orderBy: _ @orderBy(columns: ["id","is_active","description"],
        )): [GroupRole!]!   @paginate(defaultCount: 10) @deprecated

    groupList(
        query: QueryGroupCondition
        orderBy: _ @orderBy(columns: ["id","is_active","name"],
        )): [GroupRole!]!   @paginate(defaultCount: 10)
}


input QueryGroupTypesFilterStatic @spread{
    hasGroupsMixedCompanyIdOrRoleId: Mixed @eq
}

input QueryGroupCondition {
    id: ID @eq
    company_id: ID @eq
    payment_provider_id: ID @eq
    name: String @like
    role_id: ID @eq
    group_type_id: ID @eq
    commission_template_id: ID @eq
    is_active: Boolean @eq
    module_id: ID @eq
}

enum GroupTypeMode {
    CLIENTS @enum(value: "clients")
    ALL @enum(value: "all")
}

extend type Mutation @guard {
    "Создать группу"
    createGroupSettings(
        "Название группы"
        name: String!
        "Описание группы"
        description: String
        "ID роли"
        role_id: ID
        "ID типа группы из списка групп поумолчанию"
        group_type_id: ID!
        "ID платежного провайдера"
        payment_provider_id: ID
        "ID шаблона комиссий"
        commission_template_id: ID
        "Активная или нет группа (true/false)"
        is_active: Boolean
        "ID компании"
        company_id: ID
        "ID модуля"
        module_id: ID
    ): GroupRole   @field(resolver:"GroupMutator@create")

    "Обновить поля группы"
    updateGroupSettings (
        "ID группы"
        id: ID!
        "Название группы"
        name: String
        "Описание группы"
        description: String
        "ID роли"
        role_id: ID
        "ID типа группы из списка групп поумолчанию"
        group_type_id: ID!
        "ID платежного провайдера"
        payment_provider_id: ID
        "ID шаблона комиссий"
        commission_template_id: ID
        "Активная или нет группа (true/false)"
        is_active: Boolean
        "ID компании"
        company_id: ID
        "ID модуля"
        module_id: ID
    ): GroupRole   @field(resolver:"GroupMutator@update")


    "Удаление группы"
    deleteGroup(id:ID!): GroupRole   @field(resolver:"GroupMutator@delete")

    "Добавить группу мемберу"
    setMemberGroup(
        "Group"
        group_type_id: ID!
        "Payment Provider"
        payment_provider_id: ID!
        "Commission Template"
        commission_template_id: ID!
        "Роль"
        role_id: ID!
    ): GroupRole   @field(resolver:"GroupMutator@setMemberGroup")



}

