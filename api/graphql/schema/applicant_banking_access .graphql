"""
Access for Online Banking
"""
type ApplicantBankingAccess {
    id: ID!
    "Получить связанного applicant individual"
    applicant_individual: ApplicantIndividual @belongsTo(relation: "ApplicantIndividual")
    "Получить связанного applicant company"
    applicant_company: ApplicantCompany @belongsTo(relation: "ApplicantCompany")
    "Получить связанного Member"
    member: Members @belongsTo(relation: "Members")
    "Contact administrator"
    contact_administrator: Boolean!
    "Ежедневный лимит"
    daily_limit: Decimal!
    "Ежемесячный лимит"
    monthly_limit: Decimal!
    "Лимит операций"
    operation_limit: Decimal!
    "Получить роль"
    role: Role @hasOne(relation: "role")
    "Доступ"
    grant_access: Boolean
    create_payments: Boolean
    sign_payments: Boolean
}

type ApplicantBankingAccesses {
    data: [ApplicantBankingAccess!]
    paginatorInfo: PaginatorInfo
}

extend type Query @guard {
    applicantBankingAccess(id: ID @eq): ApplicantBankingAccess @field(resolver: "ApplicantBankingAccessQuery@get")
    """
    Получить список пользователей
    orderBy: [{ column: APPLICANT_INDIVIDUAL_ID, order: DESC }] сортировка по ID, по имени, фамилии, email
    filter: {column: MEMBER_ID, operator: EQ, value: 2} фильтр по applicant_individual_id, applicant_company_id, member_id, grant_access
    """
    applicantBankingAccesses(
        page: Int = 1,
        first: Int = 15,
        filter: _ @filterConditions(static: QueryApplicantBankingAccessesFilterStatic),
        orderBy: _ @orderBy(
        columns: ["id", "applicant_individual_id","applicant_company_id","member_id"],
    )): ApplicantBankingAccesses
        @field(resolver: "ApplicantBankingAccessQuery@enabled")
}

input QueryApplicantBankingAccessesFilterStatic @spread {
    applicant_individual_id: ID @eq
    applicant_company_id: ID @eq
    member_id: ID @eq
    grant_access: Boolean @eq
}

extend type Mutation @guard {
    "Создать applicant company"
    createApplicantBankingAccess (
        "Applicant individual"
        applicant_individual_id: ID!
        "Applicant company"
        applicant_company_id: ID!
        "ID роли"
        role_id: ID!
        "Contact administrator"
        contact_administrator: Boolean!
        "Ежедневный лимит"
        daily_limit: Decimal!
        "Ежемесячный лимит"
        monthly_limit: Decimal!
        "Лимит операций"
        operation_limit: Decimal!
        "Использованный лимит"
        used_limit: Decimal
    ): ApplicantBankingAccess
        @field(resolver: "ApplicantBankingAccessMutator@create")

    "Редактирование applicant banking access"
    updateApplicantBankingAccess (
        id: ID!
        "Applicant individual"
        applicant_individual_id: ID
        "Applicant company"
        applicant_company_id: ID
        "ID роли"
        role_id: ID
        "Contact administrator"
        contact_administrator: Boolean
        "Ежедневный лимит"
        daily_limit: Decimal
        "Ежемесячный лимит"
        monthly_limit: Decimal
        "Лимит операций"
        operation_limit: Decimal
    ): ApplicantBankingAccess
        @field(resolver: "ApplicantBankingAccessMutator@update")

    "Удалить пользователя"
    deleteApplicantBankingMember(
        id: ID!
    ): ApplicantBankingAccess   @delete

    "Предоставить доступ"
    grantApplicantBankingAccess(
        id: ID!
    ): ApplicantBankingAccess
        @field(resolver: "ApplicantBankingAccessMutator@grantAccess")

    "Отозвать доступ"
    deleteApplicantBankingAccess(
        id: ID!
    ): ApplicantBankingAccess @delete
}

