"""
Участники
Administration->Members
"""
type Members {
    id: ID!
    "Имя участника"
    first_name: String
    "Фамилия участника"
    last_name: String
    "Email участника"
    email: EMAIL
    "Пол участника"
    sex: Sex
    "Активен = true или не активный = false участник"
    is_active: Boolean
    "Последняя авторизация"
    last_login_at: DateTime
    "ID компании"
    company_id: ID
    "получить компанию участника"
    company: Companies! @belongsTo(relation: "company")
    "получить страну участника"
    country: Country @belongsTo(relation: "country")
    "Получить язык участника"
    language: Languages @belongsTo(relation: "language")
    "Получить группу участника"
    group: GroupRole @morphOne(relation: "groupRole")
    "Получить должность"
    position: DepartmentPosition @belongsTo(relation: "position")
    "Получить департамент"
    department: Departments @belongsTo(relation: "department")
    "ID настройки двухфактороной авторизации"
    two_factor_auth_setting_id: ID
    "Получить настройки двухфакторной авторизации"
    two_factor_auth_settings: TwoFactorAuthSettings @belongsTo(relation: "twoFactor")
    "Дополнительны поля"
    additional_fields: JSON
    "Дополнительны поля для member info"
    additional_info_fields: JSON
    "Полное имя"
    fullname: String
    "Access limitation groups"
    access_groups: [MemberAccessLimitation] @hasMany(relation: "accessLimitations")
    "если true видит только своих аппликантов"
    is_show_owner_applicants: Boolean
    "Security PIN"
    security_pin: String
    "Google Secret"
    google2fa_secret: String
    "Member Backup Codes"
    backup_codes: JSON
    "Подписывать или нет транзакцию"
    is_sign_transaction: Boolean
    "Member ip address"
    ip_addresses: [ClientIpAddress] @hasMany(relation: "ipAddress")
}

extend type Query @guard {
    "Получить участника по ID"
    member(id: ID @eq): Members   @find
    """
    Получить список участников
    orderBy: [{ column: ID, order: DESC }] сортировка по ID
    where:{column: FIRST_NAME, operator: LIKE, value: ""} фильтр по фамилии, имени, email, компании, роли, департаменту, должности
    hasPosition: {column: DEPARTMENT_ID, operator:EQ, value: 8} поиск по id департамента
    """
    members(
        filter: _ @filterConditions(static: QueryMembersFilterStatic),
        companyName: Sort @scope(name:"CompanyNameSort"),
        group: Int @scope(name:"GetGroup"),
        orderBy: _ @orderBy(columns: ["id","email","last_login_at","is_active"],
    )): [Members!]!   @paginate(defaultCount: 10) @orderBy(column: "id", direction: ASC)
}

input QueryMembersFilterStatic @spread{
    hasGroupRoleMixedGroupTypeIdOrRoleIdOrId: ID @eq
    hasDepartmentFilterById: ID @eq
    id: ID @eq
    fullname: String @ilike
    company_id: ID @eq
    email: String @ilike
    department_position_id: ID @eq
    is_active: Boolean @eq
    last_login_at: String @gte
    is_show_owner_applicants: Boolean @eq
}

extend type Mutation  {
    """
    Создать участника
    """
    createMember(
        "Имя участника"
        first_name: String!
        "Фамилия участника"
        last_name: String!
        "Email участника"
        email: EMAIL! @rules(apply: ["email", "unique:members"])
        "Пол участника"
        sex: Sex
        "ID компании"
        company_id: ID!
        "ID страны"
        country_id: ID
        "ID языка"
        language_id: ID
        "ID роли участника"
        group_id: ID!
        "Активен не активен"
        is_active: Boolean
        "ID настройки двухфактороной авторизации"
        two_factor_auth_setting_id: ID!
        "Пароль участника, если не передан то сгенерируется случайный"
        password: String @rules(apply: ["min:8", "regex:/[a-z]/","regex:/[A-Z]/","regex:/[0-9]/"])
        "если true видит только своих аппликантов"
        is_show_owner_applicants: Boolean
        "Подписывать или нет транзакцию"
        is_sign_transaction: Boolean
    ): Members @field(resolver: "MembersMutator@create")

    """
    Пригласить участника
    """
    inviteMember(
        "Имя участника"
        first_name: String!
        "Фамилия участника"
        last_name: String!
        "Email участника"
        email: EMAIL! @rules(apply: ["email", "unique:members"])
        "ID компании"
        company_id: ID!
        "ID группы участника"
        group_id: ID!
        "ID настройки двухфактороной авторизации"
        two_factor_auth_setting_id: ID!
    ): Members @field(resolver: "MembersMutator@invite")

    """
    Обновить поля участника
    """
    updateMember(
        "ID участника"
        id: ID!
        "Имя участника"
        first_name: String
        "Фамилия участника"
        last_name: String
        "Email участника"
        email: EMAIL
        "Пол участника"
        sex: Sex
        "ID компании"
        company_id: ID
        "ID страны"
        country_id: ID
        "ID языка"
        language_id: ID
        "ID роли участника"
        group_id: ID
        "Активен не активен"
        is_active: Boolean
        "ID должности"
        department_position: ID
        "ID настройки двухфактороной авторизации"
        two_factor_auth_setting_id: ID
        """
        Блок дополнительных полей
        в формате:
        {field_type:Тип поля, field_name: Название дополнительного поля, field_value: Значение поля}
        """
        additional_fields: [AdditionalFieldInput]
        "Дополнительны поля для member info"
        additional_info_fields: [AdditionalFieldInput]
        "если true видит только своих аппликантов"
        is_show_owner_applicants: Boolean
        "Подписывать или нет транзакцию"
        is_sign_transaction: Boolean
        "ip_address"
        ip_address: String
    ): Members   @field(resolver: "MembersMutator@update")

    """
    Установить пароль участника
    """
    setMemberPassword(
        id: ID!
        password: String! @rules(apply: ["confirmed","min:8", "regex:/[a-z]/","regex:/[A-Z]/","regex:/[0-9]/"])
        password_confirmation: String!
    ): Members   @field(resolver: "MembersMutator@setPassword")

    """
    Установить PIN участнику
    """
    setMemberSecurityPin(
        id: ID!
    ): Members   @field(resolver: "MembersMutator@setSecurityPin")

    """
    Удалить участника
    """
    deleteMember(
        "ID участника"
        id: ID!
    ): Members   @delete



}

