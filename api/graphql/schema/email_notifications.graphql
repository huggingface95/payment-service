"""
Шаблоны электронной почты
Banking-> Email Notifications
"""
type EmailNotification {
    id: ID!
    "Тип"
    type: NotifyType
    "Тип получателя"
    recipient_type: RecipientType
    "Тип Группы"
    group_type: GroupType @belongsTo(relation: "groupType")
    "Получить templates"
    templates: [EmailTemplate] @belongsToMany(relation: "templates")
    "Получить клиента ApplicantIndividual | ApplicantCompany | Members"
    clientable: Clientable @morphTo
    "Получить компанию"
    company: Company @belongsTo(relation: "company")
    "Получить Group Role"
    group_role: GroupRole @belongsTo(relation: "groupRole")
    created_at: DateTimeUtc
    updated_at: DateTimeUtc
}

extend type Query @guard {
    "Получить email notification"
    emailNotification(
        company_id: ID! @eq
        group_role_id: ID! @eq
        group_type_id: ID! @eq
        client_id: ID @eq
        #hasClientable: _ @whereHasConditions(columns: ["id"], handler: "App\\GraphQL\\Handlers\\EmailNotificationClientableHandler"),
    ): EmailNotification @field(resolver:"EmailNotificationQuery@get")
    """
    Получить список email notification
    orderBy: [
    {column: ID, order: DESC},
    ] сортировка по ID
    where:{column: TYPE, operator: EQ, value: ""} фильтр по типу нотификаций
    """
    emailNotifications(
        filter: _ @filterConditions(static: QueryEmailNotificationsFilterStatic),
        created_at: DateRange @whereBetween,
        orderBy: _ @orderBy(
            columns: ["id"]
        )
    ): [EmailNotification!]!   @paginate(defaultCount: 10) @orderBy(column: "id", direction: ASC)
}
#todo hasApplicantCompanyMixedIdOrName  and hasApplicantIndividualMixedIdOrFullname change to clientable
input QueryEmailNotificationsFilterStatic @spread{
    company_id: ID @eq
    type: NotifyType @eq
    recipient_type: RecipientType @eq
    hasApplicantIndividualMixedIdOrFullname: Mixed @eq
    hasApplicantCompanyMixedIdOrName: Mixed @eq
    hasGroupRoleMixedIdOrName: Mixed @eq
    hasMemberMixedIdOrFullname: Mixed @eq
    hasGroupTypeMixedIdOrName: Mixed @eq
    hasTemplatesFilterBySubject: String @ilike
}

enum NotifyType {
    Administration @enum(value: "administration")
    Client @enum(value: "client")
}

enum RecipientType {
    PERSON @enum(value: "person")
    GROUP @enum(value: "group")
}


extend type Mutation @guard {
    "Создать уведомление"
    createEmailNotification(
        "Тип Группы"
        group_type_id: ID!
        "Тип Group Role"
        group_role_id: ID!
        "ID компании"
        company_id: ID!
        "ID клиента тип унион"
        client_id: Int
        "ID email templates"
        templates: [Int]!
    ): EmailNotification   @field(resolver:"EmailNotificationMutator@create")

    "Обновить данные уведомления"
    updateEmailNotification(
        id: ID!
        "Тип Группы"
        group_type_id: ID!
        "Тип Group Role"
        group_role_id: ID!
        "ID компании"
        company_id: ID
        "ID клиента тип унион"
        client_id: Int
        "ID email templates"
        templates: [Int]
    ): EmailNotification  @field(resolver:"EmailNotificationMutator@update")

    "Удалить запись"
    deleteEmailNotification(
        id: ID!
    ): EmailNotification   @delete
}


