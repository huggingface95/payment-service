"""
Компания пользователя
Management -> New Applicant -> Create Company
"""
type ApplicantCompany {
    id: ID!
    "Название"
    name: String
    "email"
    email: EMAIL
    "Адрес сайта"
    url: String
    "Телефон"
    phone: String
    "Верецифиорован телефон true/false"
    is_verification_phone: Boolean
    "Получить связанную страну"
    country: Country @belongsTo(relation: "country")
    "Получить язык"
    language: Languages @belongsTo(relation: "language")
    "Штат / область"
    state: String
    "Город"
    city: String
    "Адрес"
    address: String
    "Адрес2"
    address2: String
    "Адрес офиса"
    office_address: String
    "Индекс"
    zip: String
    "Дата регистрации"
    reg_at: Date
    "Дата окончания регистрации"
    expires_at: Date
    "Налоговый номер"
    tax: String
    "Регистрационный номер"
    reg_number: String
    "Номер лицензии"
    license_number: String
    "Тип компании"
    company_type:String
    "Дополнительные поля Company Info"
    company_info_additional_fields: JSON
    "Дополнительные поля блока контакты"
    contacts_additional_fields: JSON
    "Дополнительные поля Profile data"
    profile_additional_fields: JSON
    "Дата создания"
    created_at: DateTime
    "Получить тип бизнеса"
    business_type: ApplicantCompanyBusinessType @belongsTo(relation: "businessType")
    "Получить статусы"
    status: ApplicantStatus @belongsTo(relation: "status")
    "Получить состояния"
    applicant_state: ApplicantState @belongsTo(relation: "state")
    "Получить причины"
    state_reason: ApplicantStateReason @belongsTo(relation: "stateReason")
    "Получить уровни рисков"
    risk_level: ApplicantRiskLevel @belongsTo(relation: "riskLevel")
    "Получить KYC level"
    kyc_level: ApplicantRiskLevel @belongsTo(relation: "kycLevel")
    "Получить менеджера"
    manager: Members @belongsTo(relation: "manager")
    "Получить создателя"
    owner: ApplicantIndividual @belongsTo(relation: "owner")
    "Получить метки"
    labels: [ApplicantCompanyLabel] @belongsToMany(relation: "labels")
    "Получить заметки"
    notes: [ApplicantCompanyNotes] @hasMany(relation: "notes")
    modules: [ApplicantCompanyModules] @hasMany (relation: "modules")
    company_position: ApplicantIndividualCompany @belongsTo(relation: "applicantIndividualCompany")
    owner_relation: ApplicantIndividualCompany @belongsTo(relation: "ownerRelation")
    owner_position: ApplicantIndividualCompany @belongsTo(relation: "ownerPosition")
    company: Companies @belongsTo(relation: "company")
    "Получить группу"
    group: GroupRole @belongsTo(relation: "group")
}


type ApplicantIndividualCompany {
    applicant_individual_id: ID!
    applicant_company_id: ID!
    applicant_individual_company_relation_id: ID!
    applicant_individual_company_position_id: ID!
    applicant_individual: ApplicantIndividual @belongsTo(relation: "ApplicantIndividual")
    relation_to_company: ApplicantIndividualCompanyRelation @belongsTo(relation: "ApplicantIndividualCompanyRelation")
    position_in_company: ApplicantIndividualCompanyPosition @belongsTo(relation: "ApplicantIndividualCompanyPosition")
}

extend type Query @guard{
    """
    Получить пользователя  по ID
    """
    applicantCompany(id: ID @eq): ApplicantCompany   @find
    """
    Получить список applicant companies
    orderBy: [{ column: FIRST_NAME, order: DESC }] сортировка по ID, по имени, фамилии, email
    where:{column: EMAIL, operator: LIKE, value: ""} фильтр по имени, фамилии, Email
    """
    applicantCompanies(
        hasRiskLevel: _ @whereHasConditions(columns: ["name", "id"]),
        hasStateReason: _ @whereHasConditions(columns: ["name", "id"]),
        hasStatus: _ @whereHasConditions(columns: ["name", "id"]),
        hasBusinessType: _ @whereHasConditions(columns: ["name", "id"]),
        hasOwner: _ @whereHasConditions(columns: ["fullname", "id"]),
        hasKycLevel: _ @whereHasConditions(columns: ["name", "id"]),
        created_at: DateRange @whereBetween, group: Sort @scope(name:"GroupSort"), company: Sort @scope(name:"CompanySort"), where: _ @whereConditions(columns: ["id","account_manager_member_id","applicant_state_id","applicant_state_reason_id","name","url" ,"email","created_at","group_id","company_id"]), orderBy: _ @orderBy(
        columns: ["id","name", "email","created_at","url","owner_id","company_id"],
    )): [ApplicantCompany!]!   @paginate(defaultCount: 10) @orderBy(column: "id", direction: ASC)
    """
    Получить список applicant individuals по applicant company
    orderBy: [{ column: ID, order: DESC }] сортировка по ID
    where:{column: applicant_company_id, operator: LIKE, value: ""} фильтр по applicant_company_id
    """
    getMatchedUsers(applicant_company_id: ID! @eq, orderBy: _ @orderBy(
        columns: ["id"],
    )): [ApplicantIndividualCompany!]!   @paginate(defaultCount: 10) @orderBy(column: "applicant_individual_id", direction: ASC)
}

extend type Mutation @guard {
    "Создать applicant company"
    createApplicantCompany (
        "Название"
        name: String!
        "email"
        email: EMAIL!
        "Адрес сайта"
        url: String!
        "Телефон"
        phone: String!
        "ID страны"
        country_id: ID!
        "ID языка"
        language_id: ID
        "Штат / область"
        state: String
        "Город"
        city: String!
        "Адрес"
        address: String!
        "Адрес2"
        address2: String
        "Адрес офиса"
        office_address: String
        "Индекс"
        zip: String
        "Дата регистрации"
        reg_at: Date
        "Дата окончания регистрации"
        expires_at: Date!
        "Налоговый номер"
        tax: String
        "Регистрационный номер"
        reg_number: String
        "Номер лицензии"
        license_number: String
        "Тип компании"
        company_type:String
        "Дополнительные поля"
        company_info_additional_fields: [AdditionalFieldInput]
        "Дополнительные поля блока контакты"
        contacts_additional_fields: [AdditionalFieldInput]
        "ID типов бизнеса"
        applicant_company_business_type_id: ID
        "ID статуса"
        applicant_status_id: ID
        "ID состояния"
        applicant_state_id: ID!
        "ID причины"
        applicant_state_reason_id: ID
        "ID уровня рисков"
        applicant_risk_level_id: ID
        "ID KYC level"
        applicant_kyc_level_id: ID
        "ID менеджера"
        account_manager_member_id: ID!
        "ID компании"
        company_id: ID!
        "ID owner"
        owner_id: ID
        "ID relation владельца"
        owner_relation_id: ID!
        "ID position владельца"
        owner_position_id: ID!
        "Массив ID меток"
        labels: [ID]
        "ID группы"
        group_id: ID
    ): ApplicantCompany   @field(resolver:"ApplicantCompanyMutator@create")

    "Редактирование applicant company"
    updateApplicantCompany (
        id: ID!
        "Название"
        name: String
        "email"
        email: EMAIL
        "Адрес сайта"
        url: String
        "Телефон"
        phone: String
        "Верецифиорован телефон true/false"
        is_verification_phone: Boolean
        "страна"
        country_id: ID
        "ID языка"
        language_id: ID
        "Штат / область"
        state: String
        "Город"
        city: String
        "Адрес"
        address: String
        "Адрес2"
        address2: String
        "Адрес офиса"
        office_address: String
        "Индекс"
        zip: String
        "Дата регистрации"
        reg_at: Date
        "Дата окончания регистрации"
        expires_at: Date
        "Налоговый номер"
        tax: String
        "Регистрационный номер"
        reg_number: String
        "Номер лицензии"
        license_number: String
        "Тип компании"
        company_type:String
        "Дополнительные поля Company Info"
        company_info_additional_fields: [AdditionalFieldInput]
        "Дополнительные поля блока контакты"
        contacts_additional_fields: [AdditionalFieldInput]
        "Дополнительные поля Profile data"
        profile_additional_fields: [AdditionalFieldInput]
        "ID типа бизнеса"
        applicant_company_business_type_id: ID
        "ID статуса"
        applicant_status_id: ID
        "ID состояния"
        applicant_state_id: ID
        "ID причины"
        applicant_state_reason_id: ID
        "ID уровня рисков"
        applicant_risk_level_id: ID
        "ID KYC level"
        applicant_kyc_level_id: ID
        "ID менеджера"
        account_manager_member_id: ID
        "ID компании"
        company_id: ID
        "ID owner"
        owner_id: ID
        "ID relation владельца"
        owner_relation_id: ID
        "ID position владельца"
        owner_position_id: ID
        "Массив ID меток"
        labels: [ID]
        "ID группы"
        group_id: ID
    ): ApplicantCompany   @field(resolver:"ApplicantCompanyMutator@update")

    "Удалить пользователя"
    deleteApplicantCompany (
        id: ID!
    ): ApplicantCompany   @delete

    "Добавить связь Individual с Company"
    createApplicantIndividualCompany(
        applicant_individual_id: ID!
        applicant_company_id: ID!
        applicant_individual_company_relation_id: ID!
        applicant_individual_company_position_id: ID!
    ): ApplicantIndividualCompany   @create

    "Редактировать связь Individual с Company"
    updateApplicantIndividualCompany(
        applicant_individual_id: ID!
        applicant_company_id: ID!
        applicant_individual_company_relation_id: ID
        applicant_individual_company_position_id: ID
    ): ApplicantIndividualCompany   @field(resolver: "ApplicantIndividualCompanyMutator@update")

    "Удалить связь Individual с Company"
    deleteApplicantIndividualCompany(
        applicant_individual_id: ID!
        applicant_company_id: ID!
    ): ApplicantIndividualCompany   @field(resolver: "ApplicantIndividualCompanyMutator@delete")

}

