"""
Частный пользователь
Management -> New Applicant -> Create Individual -> General
"""
type ApplicantIndividual {
    id: ID!
    "Имя"
    first_name: String
    "Фамилия"
    last_name: String
    "Отчество"
    middle_name: String
    "email"
    email: EMAIL
    "Адрес сайта"
    url: String
    "Телефон"
    phone: String
    "Верецифиорован телефон true/false"
    is_verification_phone: Boolean
    "Получить связанную страну"
    country: Country @belongsTo(relation: "country")
    "Получить язык"
    language: Languages @belongsTo(relation: "language")
    "Получить связанную страну гражданства"
    citizenship_country: Country @belongsTo(relation: "citizenshipCountry")
    "Штат / область"
    state: String
    "Город"
    city: String
    "Адрес"
    address: String
    "Индекс"
    zip: String
    "Национальность"
    nationality: String
    "Получить связанную страну рождения"
    birth_country: Country @belongsTo(relation: "birthCountry")
    "Штат/область рождения"
    birth_state: String
    "Город рождения"
    birth_city: String
    "Дата рождения"
    birth_at: Date
    "Пол"
    sex: Sex
    "Время создания"
    created_at: DateTime
    "Дополнительные поля Profile data"
    profile_additional_fields: JSON
    "Дополнительные поля для Personal info"
    personal_additional_fields: JSON
    "Дополнительные поля блока контакты"
    contacts_additional_fields: JSON
    "Полное имя"
    fullname: String
    "Получить статусы"
    status: ApplicantStatus @belongsTo(relation: "status")
    "Получить состояния"
    applicant_state: ApplicantState @belongsTo(relation: "state")
    "Получить причины"
    state_reason: ApplicantStateReason @belongsTo(relation: "stateReason")
    "Получить уровни рисков"
    risk_level: ApplicantRiskLevel @belongsTo(relation: "riskLevel")
    "Получить менеджера"
    manager: Members @belongsTo(relation: "manager")
    "Получить метки"
    labels: [ApplicantIndividualLabel] @belongsToMany(relation: "labels")
    "Название компании держателя applicant"
    created_for: Companies
    "Получить заметки"
    notes: [ApplicantIndividualNotes] @hasMany(relation: "notes")
    "Получить модули"
    modules: [ApplicantIndividualModules] @hasMany (relation: "modules")
    "Получить компании"
    companies: [ApplicantCompany] @belongsToMany (relation: "companies")
    "Получить роль"
    roles: [Role] @belongsToMany (relation: "roles")
}


type ApplicantIndividualCompany {
    applicant_individual_id: ID!
    applicant_company_id: ID!
    applicant_individual_company_relation_id: ID!
    applicant_individual_company_position_id: ID!
    applicant_individual: ApplicantIndividual @belongsTo(relation: "ApplicantIndividual")
    position_in_company: ApplicantIndividualCompanyPosition @belongsTo(relation: "ApplicantIndividualCompanyPosition")
}

extend type Query {
    """
    Получить пользователя  по ID
    """
    applicantIndividual(id: ID @eq): ApplicantIndividual @find
    """
    Получить список частных пользователей
    orderBy: [{ column: FIRST_NAME, order: DESC }] сортировка по ID, по имени, фамилии, email
    where:{column: EMAIL, operator: LIKE, value: ""} фильтр по имени, фамилии, Email
    """
    applicantIndividuals(
        hasRiskLevel: _ @whereHasConditions(columns: ["name", "id"]),
        hasStateReason: _ @whereHasConditions(columns: ["name", "id"]),
        hasStatus: _ @whereHasConditions(columns: ["name", "id"]),
        hasCompany: _ @whereHasConditions(columns: ["id"]),
        created_at: DateRange @whereBetween, where: _ @whereConditions(columns: ["id","first_name","last_name", "email","created_at","fullname"]), orderBy: _ @orderBy(
        columns: ["id","first_name","last_name", "email","created_at"],
    )): [ApplicantIndividual!]! @paginate(defaultCount: 10) @orderBy(column: "id", direction: ASC)
}

extend type Mutation {
    "Создать частного пользователя"
    createApplicantIndividual(
        "Имя"
        first_name: String!
        "Фамилия"
        last_name: String!
        "Отчество"
        middle_name: String
        "email"
        email: EMAIL!
        "Адрес сайта"
        url: String
        "Телефон"
        phone: String!
        "ID Страны"
        country_id: ID!
        "ID языка"
        language_id: ID
        "ID страны гражданства"
        citizenship_country_id: ID
        "Штат / область"
        state: String
        "Город"
        city: String!
        "Адрес"
        address: String!
        "Индекс"
        zip: String
        "Национальность"
        nationality: String
        "ID страны рождения"
        birth_country_id: ID!
        "Штат/область рождения"
        birth_state: String
        "Город рождения"
        birth_city: String
        "Дата рождения"
        birth_at: Date!
        "Пол"
        sex: Sex!
        "Дополнительные поля для Personal info"
        personal_additional_fields: [AdditionalFieldInput]
        "Дополнительные поля блока контакты"
        contacts_additional_fields: [AdditionalFieldInput]
        "ID статуса"
        applicant_status_id: ID
        "ID состояния"
        applicant_state_id: ID!
        "ID причины"
        applicant_state_reason_id: ID
        "ID уровня рисков"
        applicant_risk_level_id: ID
        "ID менеджера"
        account_manager_member_id: ID!
        "Role id"
        role_id: [ID]!
        "Массив ID меток"
        labels: [ID]
        "Пароль"
        password: String @rules(apply: ["confirmed","min:8", "regex:/[a-z]/","regex:/[A-Z]/","regex:/[0-9]/"])
        "подтверждение пароля"
        password_confirmation: String
    ): ApplicantIndividual @field(resolver:"ApplicantMutator@create")

    "Редактирование частного пользователя"
    updateApplicantIndividual(
        id: ID!
        "Имя"
        first_name: String
        "Фамилия"
        last_name: String
        "Отчество"
        middle_name: String
        "email"
        email: EMAIL
        "Адрес сайта"
        url: String
        "Телефон"
        phone: String
        "Верецифиорован телефон true/false"
        is_verification_phone: Boolean
        "ID Страны"
        country_id: ID
        "ID языка"
        language_id: ID
        "ID страны гражданства"
        citizenship_country_id: ID
        "Штат / область"
        state: String
        "Город"
        city: String
        "Адрес"
        address: String
        "Индекс"
        zip: String
        "Национальность"
        nationality: String
        "ID страны рождения"
        birth_country_id: ID
        "Штат/область рождения"
        birth_state: String
        "Город рождения"
        birth_city: String
        "Дата рождения"
        birth_at: Date
        "Пол"
        sex: Sex
        "Дополнительные поля Profile data"
        profile_additional_fields: [AdditionalFieldInput]
        "Дополнительные поля для Personal info"
        personal_additional_fields: [AdditionalFieldInput]
        "Дополнительные поля блока контакты"
        contacts_additional_fields: [AdditionalFieldInput]
        "ID статуса"
        applicant_status_id: ID
        "ID состояния"
        applicant_state_id: ID
        "ID причины"
        applicant_state_reason_id: ID
        "ID уровня рисков"
        applicant_risk_level_id: ID
        "ID менеджера"
        account_manager_member_id: ID
        "Role id"
        role_id: [ID]
        "Массив ID меток"
        labels: [ID]
        "Пароль"
        password: String @rules(apply: ["confirmed","min:8", "regex:/[a-z]/","regex:/[A-Z]/","regex:/[0-9]/"])
        "подтверждение пароля"
        password_confirmation: String
    ): ApplicantIndividual @field(resolver:"ApplicantMutator@update")

    """
    Установить пароль
    """
    setApplicantIndividualPassword(
        id: ID!
        "пароль"
        password: String! @rules(apply: ["confirmed","min:8", "regex:/[a-z]/","regex:/[A-Z]/","regex:/[0-9]/"])
        "подтверждение пароля"
        password_confirmation: String!
    ): ApplicantIndividual @field(resolver: "ApplicantMutator@setPassword")

    "Удалит пользователя"
    deleteApplicantIndividual(
        id: ID!
    ): ApplicantIndividual @delete

}

