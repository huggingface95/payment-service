"""
Частный пользователь
Management -> New Applicant -> Create Individual -> General
"""
type ApplicantIndividual {
    id: ID!
    "Имя"
    first_name: String
    "Фамилия"
    last_name: String
    "Отчество"
    middle_name: String
    "email"
    email: EMAIL
    "Адрес сайта"
    url: String
    "Телефон"
    phone: String
    "Статус верецификации email"
    email_verification: ApplicantVerificationStatus @belongsTo(relation: "verificationEmailStatus")
    "Статус верецификации телефона"
    phone_verification: ApplicantVerificationStatus @belongsTo(relation: "verificationPhoneStatus")
    "Получить связанную страну"
    country: Country @belongsTo(relation: "country")
    "Получить язык"
    language: Languages @belongsTo(relation: "language")
    "Получить связанную страну гражданства"
    citizenship_country: Country @belongsTo(relation: "citizenshipCountry")
    "Штат / область"
    state: String
    "Город"
    city: String
    "Адрес"
    address: String
    "Индекс"
    zip: String
    "Национальность"
    nationality: String
    "Получить связанную страну рождения"
    birth_country: Country @belongsTo(relation: "birthCountry")
    "Штат/область рождения"
    birth_state: String
    "Город рождения"
    birth_city: String
    "Дата рождения"
    birth_at: Date
    "Пол"
    sex: Sex
    "Время создания"
    created_at: DateTime
    "Дополнительные поля Profile data"
    profile_additional_fields: JSON
    "Дополнительные поля для Personal info"
    personal_additional_fields: JSON
    "Дополнительные поля блока контакты"
    contacts_additional_fields: JSON
    "Полное имя"
    fullname: String
    "время последний просмотренный"
    last_screened_at: DateTime
    "Дополнительные поля"
    address_additional_fields: JSON
    "Получить статусы"
    status: ApplicantStatus @belongsTo(relation: "status")
    "Получить состояния"
    applicant_state: ApplicantState @belongsTo(relation: "state")
    "Получить причины"
    state_reason: ApplicantStateReason @belongsTo(relation: "stateReason")
    "Получить уровни рисков"
    risk_level: ApplicantRiskLevel @belongsTo(relation: "riskLevel")
    "Получить менеджера"
    manager: Members @belongsTo(relation: "manager")
    "Получить метки"
    labels: [ApplicantIndividualLabel] @belongsToMany(relation: "labels")
    "Название компании держателя applicant"
    created_for: Company @belongsTo(relation: "company")
    "Получить заметки"
    notes: [ApplicantIndividualNotes] @hasMany(relation: "notes")
    "Получить модули"
    modules: [ApplicantIndividualModules] @belongsToMany (relation: "modules")
    "Получить компании к которым принадлежит апликант"
    applicant_companies: [ApplicantCompany] @belongsToMany (relation: "companies")
    "Получить группу"
    group: GroupRole @morphOne(relation: "groupRole")
    "Фото"
    photo: Files @belongsTo(relation: "photo")
    "Получить проект"
    project: Project @belongsTo(relation: "project")
    "Получить two factor auth"
    two_factor_auth: TwoFactorAuthSettings @belongsTo (relation: "twoFactorAuth")
    "Security PIN"
    security_pin: String
    "Google Secret"
    google2fa_secret: String
    "Backup Codes"
    backup_codes: JSON
    "IP адрес"
    ip_addresses: [ClientIpAddress] @hasMany(relation: "ipAddress")
    "Applicant KYC Level"
    kyc_level: ApplicantKycLevel @belongsTo (relation: "kycLevel")
}


type ApplicantIndividualCompany {
    applicant_individual_id: ID!
    applicant_company_id: ID!
    applicant_individual_company_relation_id: ID!
    applicant_individual_company_position_id: ID!
    applicant_individual: ApplicantIndividual @belongsTo(relation: "ApplicantIndividual")
    position_in_company: ApplicantIndividualCompanyPosition @belongsTo(relation: "ApplicantIndividualCompanyPosition")
}

extend type Query @guard {
    """
    Получить пользователя  по ID
    """
    applicantIndividual(id: ID @eq): ApplicantIndividual @find
    """
    Получить список частных пользователей
    orderBy: [{ column: FIRST_NAME, order: DESC }] сортировка по ID, по имени, фамилии, email
    where:{column: EMAIL, operator: LIKE, value: ""} фильтр по имени, фамилии, Email
    """
    applicantIndividuals(
        filter: _ @filterConditions(static: QueryApplicantIndividualsFilterStatic),
        hasRiskLevel: _ @whereHasConditions(columns: ["name", "id"]),
        hasStateReason: _ @whereHasConditions(columns: ["name", "id"]),
        hasStatus: _ @whereHasConditions(columns: ["name", "id"]),
        hasGroupRole: _ @whereHasConditions(columns: ["group_type_id","role_id","id"]),
        where: _ @whereConditions(columns: ["id","first_name","last_name", "email","created_at","fullname","company_id"]),
        group: Int @scope(name:"GetGroup"),
        created_at: DateRange @whereBetween, group: Sort @scope(name:"GroupSort"), company: Sort @scope(name:"CompanySort"),
        orderBy: _ @orderBy(columns: ["id","first_name","last_name", "email","created_at","fullname","company_id"])
    ): [ApplicantIndividual!]!    @paginate(defaultCount: 10) @orderBy(column: "id", direction: ASC)

    "Вывод списка овнеров для компаний"
    owners(
        orderBy: _ @orderBy(columns: ["id","email","created_at","fullname"])
    ): [ApplicantIndividual!]!  @field(resolver:"ApplicantIndividualQuery@owners") @orderBy(column: "id", direction: ASC)
}

input QueryApplicantIndividualsFilterStatic @spread{
    id: ID @eq
    fullname: String @ilike
    email: String @ilike
    company_id: ID @eq
    project_id: ID @eq
    kyc_level_id: ID @eq
    hasRiskLevelFilterById: ID @eq
    hasStateReasonFilterById: ID @eq
    hasStatusFilterById: ID @eq
    hasGroupRoleMixedIdOrName: Mixed @eq
    hasModulesFilterById: ID @eq
}

extend type Mutation @guard {
    "Создать частного пользователя"
    createApplicantIndividual(
        "Имя"
        first_name: String!
        "Фамилия"
        last_name: String!
        "email"
        email: EMAIL! @rules(apply: ["email", "unique:applicant_individual"])
        "Телефон"
        phone: String!
        "ID компании"
        company_id: ID!
        "ID photo"
        photo_id: ID
        "ID модулей"
        module_ids: [ID]!
        "ID Проекта"
        project_id: ID
        "ID группы"
        group_id: ID
    ): ApplicantIndividual   @field(resolver:"ApplicantMutator@create")

    "Редактирование частного пользователя"
    updateApplicantIndividual(
        id: ID!
        "Имя"
        first_name: String
        "Фамилия"
        last_name: String
        "Отчество"
        middle_name: String
        "email"
        email: EMAIL
        "Адрес сайта"
        url: String
        "Телефон"
        phone: String
        "Верецифиорован телефон true/false"
        is_verification_phone: Boolean
        "ID Страны"
        country_id: ID
        "ID языка"
        language_id: ID
        "ID страны гражданства"
        citizenship_country_id: ID
        "Штат / область"
        state: String
        "Город"
        city: String
        "Адрес"
        address: String
        "Индекс"
        zip: String
        "Национальность"
        nationality: String
        "ID страны рождения"
        birth_country_id: ID
        "Штат/область рождения"
        birth_state: String
        "Город рождения"
        birth_city: String
        "Дата рождения"
        birth_at: Date
        "Пол"
        sex: Sex
        "Дополнительные поля Profile data"
        profile_additional_fields: [AdditionalFieldInput]
        "Дополнительные поля для Personal info"
        personal_additional_fields: [AdditionalFieldInput]
        "Дополнительные поля блока контакты"
        contacts_additional_fields: [AdditionalFieldInput]
        "Дополнительные поля"
        address_additional_fields: [AdditionalFieldInput]
        "ID состояния"
        applicant_state_id: ID
        "ID причины"
        applicant_state_reason_id: ID
        "ID уровня рисков"
        applicant_risk_level_id: ID
        "ID менеджера"
        account_manager_member_id: ID
        "ID компании"
        company_id: ID
        "Массив ID меток"
        labels: [ID]
        "ID группы"
        group_id: ID
        "ID модулей"
        module_ids: [ID]
        "ID Проекта"
        project_id: ID
        "Two factor auth"
        two_factor_auth_setting_id: ID
        "Пароль"
        password: String @rules(apply: ["confirmed","min:8", "regex:/[a-z]/","regex:/[A-Z]/","regex:/[0-9]/"])
        "Подтверждение пароля"
        password_confirmation: String
        "IP адрес"
        ip_address: String
        "ID photo"
        photo_id: ID
        "KYC Level"
        kyc_level_id: ID
        "время последний просмотренный"
        last_screened_at: DateTime
    ): ApplicantIndividual   @field(resolver:"ApplicantMutator@update")

    """
    Изменить статус аппликанта
    """
    updateApplicantIndividualVerificationStatus(
        id: ID!
        "ID статуса"
        applicant_status_id: ID!
    ): ApplicantIndividual   @update

    """
    Установить пароль
    """
    setApplicantIndividualPassword(
        id: ID!
        "пароль"
        password: String! @rules(apply: ["confirmed","min:8", "regex:/[a-z]/","regex:/[A-Z]/","regex:/[0-9]/"])
        "подтверждение пароля"
        password_confirmation: String!
    ): ApplicantIndividual   @field(resolver: "ApplicantMutator@setPassword")

    """
    Установить PIN пользователю
    """
    setApplicantSecurityPin(
        id: ID!
    ): ApplicantIndividual   @field(resolver: "ApplicantMutator@setSecurityPin")

    "Удалить пользователя"
    deleteApplicantIndividual(
        id: ID!
    ): ApplicantIndividual   @delete

    """
    Отправить ссылку для подтверждения email
    """
    sendEmailVerification(
        applicant_id: ID!
    ): ApplicantIndividual   @field(resolver: "ApplicantMutator@sendEmailVerification")

    """
    Отправить подтверждение телефона
    """
    sendPhoneVerification(
        applicant_id: ID!
    ): ApplicantIndividual   @field(resolver: "ApplicantMutator@sendPhoneVerification")

    """
    Сбросить пароль участнику
    """
    sendEmailResetPassword(
        applicant_id: ID!
        email: String
    ): ApplicantIndividual   @field(resolver: "ApplicantMutator@sendEmailResetPassword")

    """
    Отправить ссылку на регистрацию
    """
    sendEmailRegistation(
        applicant_id: ID!
        email: String
    ): ApplicantIndividual   @field(resolver: "ApplicantMutator@sendEmailRegistrationLink")
}

