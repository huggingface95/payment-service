"""
Департаменты
Administration->Company Info->Full Profile->Department
"""
type Department {
    id: ID!
    "Название департамента"
    name: String!
    "Дата создания Департамент"
    created_at: DateTimeUtc
    "Получить компанию"
    company: Company @belongsTo(relation: "company")
    "Получить должность"
    positions: [DepartmentPosition] @hasMany(relation: "positions")
}

"Должности"
type DepartmentPosition {
    id: ID!
    "Назварие должности"
    name: String!
    "Активен = true или не активный = false"
    is_active: Boolean
    "Получить компанию"
    company: Company @belongsTo(relation: "company")
    "Получить департамент"
    department: [Department] @BelongsToMany(relation: "department")
}

extend type Query @guard {
    "Получить департамент по его ID"
    department(id: ID @eq): Department  @find
    """
    Получить список департаментов
    orderBy: [{ column: ID, order: DESC }] сортировка по названию или по ID
    where:{column: NAME, operator: LIKE, value: ""} фильтр по названию
    hasCompany: {column:ID,operator:EQ,value:1} фильтр по id компании
    """
    departments(
        filter: _ @filterConditions(static: QueryDepartmentsFilterStatic),
        created_at: DateTimeRange @whereBetween,
        orderBy: _ @orderBy(columns: ["id","name"])
    ): [Department!]!   @paginate(defaultCount: 10) @orderBy(column: "id", direction: ASC)
    "Получить должность по ID"
    departmentPosition(id: ID @eq): DepartmentPosition   @find
    """
    Получить список должностей
    orderBy: [{ column: ID, order: DESC }] сортировка по названию, по ID, по is_active
    where:{column: NAME, operator: LIKE, value: ""} фильтр по названию, по полю is_active
    hasDepartment: {column:ID,operator:EQ,value:1} фильтр по id департамента
    """
    departmentPositions(
        company_id: ID @eq,
        filter: _ @filterConditions(static: QueryDepartmentPositionsFilterStatic),
        orderBy: _ @orderBy(columns: ["id","name","is_active"])
    ): [DepartmentPosition!]!   @paginate(defaultCount: 10) @orderBy(column: "id", direction: ASC)
}

input QueryDepartmentsFilterStatic @spread{
    hasCompanyFilterById: ID @eq
    name: String @eq @ilike
}

input QueryDepartmentPositionsFilterStatic @spread{
    hasDepartmentFilterById: ID @eq
    name: String @eq @ilike
    is_active: Boolean @eq
}

extend type Mutation @guard {
    "Создать департамент"
    createDepartment(
        "Название департамента"
        name: String!
        "ID компании"
        company_id: ID!
        "Массив ID должностей"
        department_positions_id: [ID]
    ): Department   @field(resolver:"DepartmentMutator@create")

    "Изменить название департамента"
    updateDepartment(
        "ID департамента"
        id: ID!
        "Название департамента"
        name: String
        "ID активных должностей"
        department_positions_id: [ID]
    ): Department  @field(resolver:"DepartmentMutator@update")

    "Создание должности"
    createDepartmentPosition(
        "Назвние должности"
        name: String!
        "ID компании"
        company_id: ID!
    ): DepartmentPosition   @field(resolver:"DepartmentPositionMutator@create")

    "Удалить департамент"
    deleteDepartment(id: ID!): Department   @field(resolver:"DepartmentMutator@delete")
    "Удалить должность"
    deleteDepartmentPosition(id: ID!): DepartmentPosition   @delete

}

