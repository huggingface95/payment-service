type FeeItem {
   mode: String!
   fee: Float
   amount_from: Decimal
   amount_to: Decimal
   percent: Float
}

type PriceListFeeCurrency {
    id: ID!
    currency_id: ID!
    price_list_fee_id: ID!
    fee: [FeeItem]
}

"""
Цены прайс листа
Banking -> Цены прайс листа
"""
type PriceListFee {
    id: ID!
    "Название"
    name: String!
    "Company"
    company: Company @belongsTo(relation: "company")
    "Тип"
    fee_type: FeeType @belongsTo(relation: "feeType")
    "Тип операции"
    operation_type: OperationType @belongsTo(relation: "operationType")
    "Период"
    period: FeePeriod @belongsTo(relation: "feePeriod")
    "Цены"
    fees: [PriceListFeeCurrency] @belongsTo(relation: "fees")
    price_list_id: ID
    fee_ranges: JSON
    scheduled: PriceListFeeScheduled @hasOne(relation: "feeScheduled")
    "Провайдер квот"
    quote_provider: QuoteProvider @belongsTo(relation: "quoteProvider")
    "Дата создания"
    created_at: DateTimeUtc
    "Дата обновления"
    updated_at: DateTimeUtc
}

type PriceListFeeScheduled {
    starting_date: DateTimeUtc
    end_date: DateTimeUtc
    recurrent_interval: Int
    starting_date_id: ID
    end_date_id: ID
}

extend type Query @guard {
    """
    Получить список Цен
    where:{column: NAME, operator: LIKE, value: ""} фильтр по имени, тип, тип операции, период
    """
    priceListFees(
        filter: _ @filterConditions(static: QueryPriceListFeesFilterStatic)
        orderBy: _ @orderBy(column: "id", direction: ASC)
    ): [PriceListFee!]! @paginate(defaultCount: 10)  @orderBy(column: "id", direction: ASC)
}

input QueryPriceListFeesFilterStatic @spread{
    id: ID @eq
    company_id: ID @eq
    price_list_id: ID @eq
    type_id: ID @eq
    operation_type_id: ID @eq
    period_id: ID @eq
    hasCompanyFilterById: ID @eq
    hasPaymentProviderFilterById: ID @eq
    hasPaymentSystemFilterById: ID @eq
    hasFeesFilterById: ID @eq
}

input PriceListFeesList {
   currency_id: ID!
   fee: [[PriceListFeeItem]!]!
}

input PriceListFeeItem {
   mode: String!
   fee: Float
   amount_from: Decimal
   amount_to: Decimal
   percent: Float
}

input priceList {
    payment_system_id: ID
    commission_template_id: ID
    payment_provider_id: ID
    company_id: ID
}

input PriceListFeeInput {
    name: String!
    company_id: ID!
    type_id: ID!
    operation_type_id: ID!
    period_id: ID
    price_list_id: ID!
    quote_provider_id: ID
    fee_ranges: JSON
    fees: [PriceListFeesList!]
    scheduled: PriceListFeeScheduledInput
}

input PriceListFeeScheduledInput {
    starting_date: DateTimeUtc
    end_date: DateTimeUtc
    recurrent_interval: Int
    starting_date_id: ID
    end_date_id: ID
}

extend type Mutation @guard {
    "Создать Цен"
    createPriceListFees(
        input: PriceListFeeInput @spread
    ): PriceListFee   @field(resolver:"PriceListFeesMutator@create") @validator

    "Обновить данные Цен"
    updatePriceListFees(
        id: ID!
        commission_price_list: [priceList]
        input: PriceListFeeInput @spread
    ): PriceListFee   @field(resolver:"PriceListFeesMutator@update")

    """
    Удалить Цен
    """
    deletePriceListFees(
        "ID price list fee"
        id: ID!
    ): PriceListFee   @delete
}
