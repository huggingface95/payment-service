union Client = ApplicantIndividual | ApplicantCompany
"""
Аккаунты
Banking -> Account -> Account List
"""
type Account {
    id: ID!
    "Получить связанный код валюты"
    currency: Currencies @belongsTo(relation:"currencies")
    "Получить связанного владельца"
    owner: ApplicantIndividual @belongsTo(relation:"owner")
    "Номер аккаунта"
    account_number: String
    "Тип аккаунта"
    account_type: AccountType
    "Получить связанного платежного провайдера"
    payment_provider: PaymentProvider @belongsTo(relation:"paymentProvider")
    "Получить связанного Пеймент систем"
    payment_system: PaymentSystem @belongsTo(relation:"paymentSystem")
    "Получить банк"
    payment_bank: PaymentBank @belongsTo(relation:"paymentBank")
    "Получить связанный шаблон комиссии"
    commission_template: CommissionTemplate @belongsTo(relation:"commissionTemplate")
    "Получить групроле"
    group: GroupRole @belongsTo(relation:"groupRole")
    "Получить тип группы"
    group_type: GroupType @belongsTo(relation:"group")
    "Получить или индивидуала или компании"
    client: Client @morphTo(relation:"clientable")
    "Состояние аккаунта"
    account_state: AccountState @belongsTo(relation:"accountState")
    "Компания которой принадлежит аккаунт"
    company: Companies @belongsTo(relation:"company")
    "Получить менеджера"
    member: Members @belongsTo(relation:"member")
    "Все аккаунты клиента"
    client_accounts: [ClientAccountsDetails!]!
    "Имя аккаунта"
    account_name: String!
    "Основной или нет"
    is_primary: Boolean
    created_at: DateTime
    updated_at: DateTime
    activated_at: DateTime
}

type AccountClient {
    id: ID!
    client: Client! @morphTo(relation:"client")
}

type AccountState {
    id: ID!
    name: String!
    active: Boolean!
}

type ClientAccountsDetails{
    id: ID!
    "Текущий баланс"
    current_balance: Decimal!
    "Текущий баланс"
    reserved_balance: Decimal!
    "Текущий баланс"
    available_balance: Decimal!
    "Получить связанный код валюты"
    currency: Currencies!
}

type AccountGenerateIbanResponse{
    status: String!
    message: String!
}

enum AccountType {
    Private @enum(value: "Private")
    Business @enum(value: "Business")
}

enum AccountClientsType {
    INDIVIDUAL @enum(value: "App\\Models\\ApplicantIndividual")
    COMPANY @enum(value: "App\\Models\\ApplicantCompany")
}

extend type Query @guard {
    "Получить аккаунт по ID"
    account(id: ID! @eq): Account @find
    """
    Получить список аккаунтов
    orderBy: [{ column: ID, order: DESC }] сортировка по ID
    """
    accounts(
        query: QueryAccountCondition,
        created_at: DateTimeRange @whereBetween,
        orderBy: _ @orderBy(columns: ["id","created_at"])
    ): [Account!]!   @paginateWithConditions(defaultCount: 10) @orderBy(column: "id", direction: DESC) @deprecated

    accountList(
        filter: _ @filterConditions(static: QueryAccountListFilterStatic),
        created_at: DateTimeRange @whereBetween,
        orderBy: _ @orderBy(columns: ["id","created_at"])
    ): [Account!]!   @paginate(defaultCount: 10) @orderBy(column: "id", direction: DESC)

    """
    Получить список accounts для accountDetails
    """
    accountDetailsList(
        filter: _ @filterConditions(static: QueryAccountDetailsListFilterStatic),
        query: QueryAccountDetailsCondition
        orderBy: _ @orderBy(columns: ["id","created_at"])
    ): [Account!]!  @field(resolver:"AccountsQuery@clientDetailsList") @orderBy(column: "id", direction: ASC)

    """
    Получить список account states
    """
    accountStates(
        orderBy: _ @orderBy(columns: ["id", "name"])
    ): [AccountState!]!   @all @orderBy(column: "id", direction: ASC)

    """
    Получить список клиентов
    """
    clientList(group_type: ID @eq): [AccountClient!]! @field(resolver:"AccountsQuery@clientList") @orderBy(column: "id", direction: ASC)
}

input QueryAccountListFilterStatic @spread{
    hasCompanyMixedIdOrName: Mixed @eq
    hasPaymentProviderMixedIdOrName: Mixed @eq
    hasPaymentSystemMixedIdOrName: Mixed @eq
    hasOwnerMixedIdOrFullname: Mixed @eq
    MixedAccountNumberOrAccountName: String @ilike
    currency_id: ID @eq
    hasGroupRoleMixedIdOrName: Mixed @eq
    group_type_id: ID @eq
    hasMemberMixedIdOrFullname: Mixed @eq
    is_primary: Boolean @eq
    hasCommissionTemplateMixedIdOrFullname: Mixed @eq
    account_state_id: ID @eq
    hasClientableMixedIdOrFullname: Mixed @eq
}

input QueryAccountDetailsListFilterStatic @spread{
    account_name: String @ilike
    hasCompanyMixedIdOrName: Mixed @eq
    group_type_id: ID @eq
    hasGroupRoleMixedIdOrName: Mixed @eq
    hasOwnerMixedIdOrFullname: Mixed @eq
    hasPaymentProviderMixedIdOrName: Mixed @eq
}

#todo
#client: String  - поиск по id клиента или по fullname

input QueryAccountCondition {
    client: String @like
    company: String @like
    payment_provider: String @eq
    owner: String @eq
    account_number: String @like
    account_name: String @like
    currency_id: ID @eq
    group_role: String @like
    group_type_id: ID @eq
    member: String @like
    is_primary: Boolean @eq
    commission_template: String @like
    account_state_id: ID @eq
    #client_id: ID @eq
    #client_type: AccountClientsType @eq
}
input QueryAccountDetailsCondition {
    account_name: String @like
    filter: FilterAccountDetails
}

input FilterAccountDetails {
    company: String @like
    group_type_id: ID @eq
    group_role: String @like
    owner: String @like
    payment_provider: String @like
}




input QueryClientCondition {
    id: ID!
}

enum QueryAccountWhereColumn {
    ACCOUNT_NUMBER @enum(value: "account_number")
    ACCOUNT_TYPE @enum(value: "account_type")
    ACCOUNT_STATE_ID @enum(value: "account_state_id")
    OWNER_ID @enum(value: "owner_id")
    ACCOUNT_NAME @enum(value: "account_name")
    CURRENCY_ID @enum(value: "currency_id")
    PAYMENT_PROVIDER_ID @enum(value: "payment_provider_id")
    COMPANY_ID @enum(value: "company_id")
    GROUP_ROLE_ID @enum(value: "group_role_id")
    GROUP_TYPE_ID @enum(value: "group_type_id")
    MEMBER_ID @enum(value: "member_id")
    ACCOUNT_NUMBER @enum(value: "account_number")
    IS_PRIMARY @enum(value: "is_primary")
    COMMISSION_TEMPLATE_ID @enum(value: "commission_template_id")
    #CLIENT_ID @enum(value: "client_id")
    #CLIENT_TYPE @enum(value: "client_type")
}


input InputAccount{
    "ID компании",
    company_id: ID!
    "ID валюты"
    currency_id: ID!
    "ID владельца"
    owner_id: ID!
    "Номер аккаунта"
    account_number: String
    "ID провайдера"
    payment_provider_id: ID!
    "ID шаблона комиссии"
    commission_template_id: ID!
    "Имя аккаунта"
    account_name: String!
    "Основной или нет"
    is_primary: Boolean
    "ID групроле"
    group_role_id: ID!
    "ID группы"
    group_type_id: ID!
    "ID платежной системы"
    payment_system_id: ID!
    "ID банка"
    payment_bank_id: ID
    "clientable"
    clientableAttach: PivotTable
    "фильтр"
    query: QueryAccountCondition
}

extend type Mutation @guard {
    "Создать аккаунт"
    createAccount(
        input: InputAccount! @spread
    ):[Account!]! @field(resolver:"AccountMutator@create")

    "Редактирование аккаунта"
    updateAccount(
        id: ID!
        "Имя аккаунта"
        account_name: String!
        "Состояние аккаунта"
        account_state_id: ID!
        "Основной или нет"
        is_primary: Boolean!
    ): Account   @update

    "Удалить аккаунт"
    deleteAccount(
        id: ID!
    ): Account  @delete

    "Генерация iban individual"
    generateIban(
        id: ID!
    ):AccountGenerateIbanResponse! @field(resolver: "AccountMutator@generate")
}
