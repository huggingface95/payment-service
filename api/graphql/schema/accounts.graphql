union Client = ApplicantIndividual | ApplicantCompany
"""
Аккаунты
Banking -> Accounts -> Accounts List
"""
type Accounts {
    id: ID!
    "Получить связанный код валюты"
    currency: Currencies @belongsTo(relation:"currencies")
    "Получить связанного владельца"
    owner: ApplicantIndividual @belongsTo(relation:"owner")
    "Номер аккаунта"
    account_number: String!
    "Тип аккаунта"
    account_type: AccountType
    "Получить связанного платежного провайдера"
    payment_provider_id: PaymentProvider @belongsTo(relation:"paymentProvider")
    "Получить связанного Пеймент систем"
    payment_system: PaymentSystem @hasOne(relation:"paymentSystem")
    "Получить связанный шаблон комиссии"
    commission_template_id: CommissionTemplate @belongsTo(relation:"commissionTemplate")
    "Получить группу"
    group: GroupRole @belongsTo(relation:"groupRole")
    "Получить или индивидуала или компании"
    client: Client @morphOne(relation:"clientable")
    "Состояние аккаунта"
    account_state: AccountState @belongsTo(relation:"accountState")
    "Компания которой принадлежит аккаунт"
    company: Companies @belongsTo(relation:"company")
    "Получить менеджера"
    member: Members @belongsTo(relation:"member")
    "Имя аккаунта"
    account_name: String!
    "Основной или нет"
    is_primary: Boolean
    "Текущий баланс"
    current_balance: Int!
    "Текущий баланс"
    reserved_balance: Int!
    "Текущий баланс"
    available_balance: Int!
    created_at: DateTime
    updated_at: DateTime
    activated_at : DateTime
}

type AccountState {
    id: ID!
    name: String!
}
enum AccountType {
    Private @enum(value: "Private")
    Business @enum(value: "Business")
}

extend type Query @guard {
    "Получить аккаунт по ID"
    account(id: ID @eq): Accounts   @find
    """
    Получить список аккаунтов
    orderBy: [{ column: ID, order: DESC }] сортировка по ID
    """
    accounts(
        hasGroupRole: _ @whereHasConditions(columns: ["id"]),
        hasClientable: _ @whereHasConditions(columns: ["id"]),
        query: QueryAccountCondition
        created_at: DateRange @whereBetween,
        where: _ @whereConditions(columns: ["company_id", "payment_provider_id", "owner_id","account_number", "currency_id", "group_id", "member_id",
            "is_primary", "commission_template_id", "currency_id", "account_type", "account_state_id", "account_name"
        ]),
        orderBy: _ @orderBy(columns: ["id", "client_id"])
    ): [Accounts!]!   @paginate(defaultCount: 10) @orderBy(column: "id", direction: ASC)
}

input QueryAccountCondition {
    company_id: ID @eq
    payment_provider_id: ID @eq
    owner_id: ID @eq
    account_number: String @like
    currency_id: ID @eq
    group_id: ID @eq
    member_id: ID @eq
    is_primary: Boolean @eq
    commission_template_id: ID @eq
    currency_id: ID @eq
    account_type: String @eq
    account_state_id: ID @eq
    account_name: String @like
}

enum QueryAccountWhereColumn {
    ACCOUNT_NUMBER @enum(value: "account_number")
    CLIENT_ID @enum(value: "client_id")
    OWNER_ID @enum(value: "owner_id")
    ACCOUNT_NAME @enum(value: "account_name")
    CURRENCY_ID @enum(value: "currency_id")
    PAYMENT_PROVIDER_ID @enum(value: "payment_provider_id")
    COMPANY_ID @enum(value: "company_id")
    GROUP_ID @enum(value: "group_id")
}


input InputAccount{
    "ID компании",
    company_id :ID!
    "ID валюты"
    currency_id: ID!
    "ID аппликанта"
    client_id: ID!
    "ID владельца"
    owner_id: ID!
    "Номер аккаунта"
    account_number: String!
    "Тип аккаунта"
    account_type: AccountType!
    "ID провайдера"
    payment_provider_id: ID!
    "ID шаблона комиссии"
    commission_template_id: ID!
    "Состояние аккаунта"
    account_state_id: ID!
    "Имя аккаунта"
    account_name: String!
    "Основной или нет"
    is_primary: Boolean
}

extend type Mutation @guard {
    "Создать аккаунт"
    createAccount(
        input: InputAccount!
    ):Accounts @field(resolver:"AccountMutator@create")

    "Редактирование аккаунта"
    updateAccount(
        id: ID!
        input: InputAccount!
    ): Accounts   @field(resolver:"AccountMutator@update")

    "Удалить аккаунт"
    deleteAccount(
        id: ID!
    ): Accounts   @delete

    "Создать аккаунт"
    generateIban(
        id: ID!
    ):Accounts   @field(resolver: "AccountMutator@generate")
}
