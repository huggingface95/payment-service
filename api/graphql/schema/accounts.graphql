"""
Аккаунты
Banking -> Account -> Account List
"""
type Account {
    id: ID!
    "Получить связанный код валюты"
    currency: Currencies @belongsTo(relation:"currencies")
    "Получить связанного владельца"
    owner: ApplicantIndividual @belongsTo(relation:"owner")
    "Номер аккаунта"
    account_number: String
    "Тип аккаунта"
    account_type: AccountType
    "Получить связанного платежного провайдера"
    payment_provider: PaymentProvider @belongsTo(relation:"paymentProvider")
    "Получить связанного платежного провайдера iban"
    iban_provider: PaymentProviderIban @belongsTo(relation:"paymentProviderIban")
    "Получить банк"
    payment_bank: PaymentBank @belongsTo(relation:"paymentBank")
    "Получить связанный шаблон комиссии"
    commission_template: CommissionTemplate @belongsTo(relation:"commissionTemplate")
    "Получить групроле"
    group: GroupRole @belongsTo(relation:"groupRole")
    "Получить тип группы"
    group_type: GroupType @belongsTo(relation:"group")
    "Получить или индивидуала или компании"
    client: Client @morphTo(relation:"clientable")
    "Состояние аккаунта"
    account_state: AccountState @belongsTo(relation:"accountState")
    "Компания которой принадлежит аккаунт"
    company: Company @belongsTo(relation:"company")
    "Получить менеджера"
    member: Members @belongsTo(relation:"member")
    "Получить Проект"
    project: Project @belongsTo(relation:"project")
    "Все аккаунты клиента"
    client_accounts: [ClientAccountsDetails!]!
    "Имя аккаунта"
    account_name: String!
    "Основной или нет"
    is_primary: Boolean
    "Текущий баланс"
    current_balance: Decimal!
    "Текущий баланс"
    reserved_balance: Decimal!
    "Текущий баланс"
    available_balance: Decimal!
    "лимит максимального баланса"
    min_limit_balance: Decimal
    "лимит минимального баланса"
    max_limit_balance: Decimal
    created_at: DateTimeUtc
    updated_at: DateTimeUtc
    activated_at: DateTimeUtc
    last_charge_at: DateTimeUtc
    "Total transactions"
    total_transactions: Int
    "Total pending transactions"
    total_pending_transactions: Int
    "основной аккаунт или нет"
    alias: Boolean!
}

type AccountState {
    id: ID!
    name: String!
    active: Boolean!
}

type ClientAccountsDetails{
    id: ID!
    "Текущий баланс"
    current_balance: Decimal!
    "Текущий баланс"
    reserved_balance: Decimal!
    "Текущий баланс"
    available_balance: Decimal!
    "Получить связанный код валюты"
    currency: Currencies!
    "лимит максимального баланса"
    min_limit_balance: Decimal
    "лимит минимального баланса"
    max_limit_balance: Decimal
}

type AccountGenerateIbanResponse{
    status: String!
    message: String!
}

enum AccountType {
    Private @enum(value: "Private")
    Business @enum(value: "Business")
}

enum AccountClientsType {
    INDIVIDUAL @enum(value: "ApplicantIndividual")
    COMPANY @enum(value: "ApplicantCompany")
}

extend type Query @guard {
    "Получить аккаунт по ID"
    account(id: ID! @eq): Account @find

    """
    Получить список аккаунтов
    orderBy: [{ column: ID, order: DESC }] сортировка по ID
    """
    accountList(
        filter: _ @filterConditions(static: QueryAccountListFilterStatic),
        created_at: DateTimeRange @whereBetween,
        orderBy: _ @orderBy(columns: ["id", "created_at"])
    ): [Account!]!   @paginate(defaultCount: 10) @orderBy(column: "id", direction: DESC)

    """
    Получить список активных аккаунтов
    """
    accountActiveList(
        filter: _ @filterConditions(static: QueryAccountActiveListFilterStatic),
        created_at: DateTimeRange @whereBetween,
        orderBy: _ @orderBy(columns: ["id", "created_at"])
    ): [Account] @all(scopes: ["active"]) @orderBy(column: "id", direction: ASC)

    """
    Получить список account states
    """
    accountStates(
        orderBy: _ @orderBy(columns: ["id", "name"])
    ): [AccountState!]!   @all @orderBy(column: "id", direction: ASC)

    """
    Получить список клиентов
    """
    clientList(
        filter: _ @filterConditions(static: QueryClientListFilterStatic)
    ): [Client!]! @field(resolver:"AccountsQuery@clientList") @orderBy(column: "id", direction: ASC)


    clientListActive(
        filter: _ @filterConditions(static: QueryClientListActiveFilterStatic)
    ): [Client!]! @field(resolver:"AccountsQuery@clientListActive") @orderBy(column: "id", direction: ASC)

    applicantsBankingActive(
        filter: _ @filterConditions(static: QueryApplicantsBankingActiveFilterStatic)
    ): [Client!]! @field(resolver:"AccountsQuery@clientListBankingActive") @orderBy(column: "id", direction: ASC)

    """
    Скачать список аккаунтов
    """
    downloadAccountList(
        type: ExportFileType!
        filter: _ @filterConditions(static: QueryDownloadAccountListFilterStatic)
        created_at: DateTimeRange @whereBetween
    ): RawFile
        @downloadFileWithConditions(model: "Account")
}

input QueryClientListFilterStatic @spread{
    group_type_id: ID @eq
    company_id: ID @eq
    group_role_id: ID @eq
    account_number: String @ilike
    hasClientableFilterById: Mixed @eq
    hasClientableFilterByEmail: String @ilike
    hasClientableFilterByPhone: String @ilike
    hasClientableMixedIdOrFullnameOrName: Mixed @eq
}

input QueryClientListActiveFilterStatic @spread{
    group_type_id: ID @eq
    company_id: ID @eq
    group_role_id: ID @eq
    account_number: String @ilike
    hasClientableFilterById: Mixed @eq
    hasClientableFilterByEmail: String @ilike
    hasClientableFilterByPhone: String @ilike
    hasClientableMixedIdOrFullnameOrName: Mixed @eq
}

input QueryApplicantsBankingActiveFilterStatic @spread{
    group_role_id: ID @eq
    account_id: ID @eq
    account_number: String @ilike
    hasClientableFilterById: Mixed @eq
    hasClientableFilterByGroupTypeId: Mixed @eq
    hasClientableFilterByCompanyId: Mixed @eq
    hasClientableFilterByEmail: String @ilike
    hasClientableFilterByPhone: String @ilike
    hasClientableMixedIdOrFullnameOrName: Mixed @eq
}

input QueryAccountListFilterStatic @spread{
    id: ID @eq
    project_id: ID @eq
    hasCompanyMixedIdOrName: Mixed @eq
    hasOwnerMixedIdOrFullname: Mixed @eq
    MixedAccountNumberOrAccountName: String @ilike
    currency_id: ID @eq @neq
    hasGroupRoleMixedIdOrName: Mixed @eq
    group_type_id: ID @eq
    hasMemberMixedIdOrFullname: Mixed @eq
    is_primary: Boolean @eq
    hasCommissionTemplateMixedIdOrFullname: Mixed @eq
    account_state_id: ID @eq
    hasClientableMixedIdOrFullnameOrName: Mixed @eq
    payment_provider_id: ID @eq
    iban_provider_id: ID @eq
    current_balance: Float @eq
    available_balance: Float @eq
    reserved_balance: Float @eq
}

input QueryAccountActiveListFilterStatic @spread{
    id: ID @eq
    project_id: ID @eq
    hasCompanyMixedIdOrName: Mixed @eq
    hasOwnerMixedIdOrFullname: Mixed @eq
    MixedAccountNumberOrAccountName: String @ilike
    currency_id: ID @eq @neq
    hasGroupRoleMixedIdOrName: Mixed @eq
    group_type_id: ID @eq
    hasMemberMixedIdOrFullname: Mixed @eq
    is_primary: Boolean @eq
    hasCommissionTemplateMixedIdOrFullname: Mixed @eq
    account_state_id: ID @eq
    hasClientableMixedIdOrFullnameOrName: Mixed @eq
    payment_provider_id: ID @eq
    iban_provider_id: ID @eq
    current_balance: Float @eq
    available_balance: Float @eq
    reserved_balance: Float @eq
}


input QueryDownloadAccountListFilterStatic @spread {
    id: ID @eq
    hasCompanyMixedIdOrName: Mixed @eq
    hasOwnerMixedIdOrFullname: Mixed @eq
    MixedAccountNumberOrAccountName: String @ilike
    currency_id: ID @eq
    hasGroupRoleMixedIdOrName: Mixed @eq
    group_type_id: ID @eq
    hasMemberMixedIdOrFullname: Mixed @eq
    is_primary: Boolean @eq
    hasCommissionTemplateMixedIdOrFullname: Mixed @eq
    account_state_id: ID @eq
    hasClientableMixedIdOrFullname: Mixed @eq
    payment_provider_id: ID @eq
    iban_provider_id: ID @eq
    current_balance: Float @eq
    available_balance: Float @eq
    reserved_balance: Float @eq
}



#todo
#client: String  - поиск по id клиента или по fullname

input QueryClientCondition {
    id: ID!
}

#input InputAccountClients{
#    id: ID!
#    client_type: AccountClientsType!
#}

input InputAccount{
    "ID компании",
    company_id: ID!
    "ID валюты"
    currency_id: ID!
    "ID владельца"
    owner_id: ID!
    "Номер аккаунта"
    account_number: String
    "ID провайдера"
    payment_provider_id: ID!
    "ID провайдера iban"
    iban_provider_id: ID
    "ID шаблона комиссии"
    commission_template_id: ID!
    "Имя аккаунта"
    account_name: String!
    "Основной или нет"
    is_primary: Boolean
    "ID групроле"
    group_role_id: ID
    "ID группы"
    group_type_id: ID!
    "ID банка"
    payment_bank_id: ID
    "ID Проекта"
    project_id: ID
    "ID родительского аккаунта"
    parent_id: ID
    "ID Individual or Company"
    client_id: ID
    "лимит максимального баланса"
    min_limit_balance: Decimal
    "лимит минимального баланса"
    max_limit_balance: Decimal
    "Текущий баланс"
    current_balance: Decimal
}

extend type Mutation @guard {
    "Создать аккаунт"
    createAccount(
        input: InputAccount! @spread
    ):[Account!]! @field(resolver:"AccountMutator@create")

    "Редактирование аккаунта"
    updateAccount(
        id: ID!
        "Имя аккаунта"
        account_name: String!
        "Состояние аккаунта"
        account_state_id: ID!
        "лимит максимального баланса"
        min_limit_balance: Decimal
        "лимит минимального баланса"
        max_limit_balance: Decimal
        "Основной или нет"
        is_primary: Boolean!
    ): Account   @update

    "Удалить аккаунт"
    deleteAccount(
        id: ID!
    ): Account  @delete

    "Генерация iban individual"
    generateIban(
        id: ID!
    ):AccountGenerateIbanResponse! @field(resolver: "AccountMutator@generate")
}
