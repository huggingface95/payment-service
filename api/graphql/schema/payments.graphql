"""
Платежи
Banking -> Payments List
"""
type Payments {
    id: ID!
    "Получить связанный аккаунт"
    account: Account @belongsTo(relation:"account")
    "Получить связанную валюту"
    currency: Currencies @belongsTo(relation:"currency")
    price_list_fees: PriceListFee @belongsTo(relation:"priceListFees")
    "Номер счета или IBAN получателя"
    recipient_account: String
    recipient_bank_name: String
    recipient_bank_address: String
    recipient_bank_swift: String
    recipient_bank_country: Country @belongsTo(relation:"recipientBankCountry")
    beneficiary_name: String
    beneficiary_state: String
    beneficiary_country: Country @belongsTo(relation:"beneficiaryCountry")
    beneficiary_address: String
    beneficiary_city: String
    beneficiary_zip: String
    beneficiary_additional_data: JSON
    "Сумма"
    amount: Decimal!
    amount_real: Decimal!
    status_id: ID
    "Комиссия"
    fee: Decimal
    fee_type: FeeType @belongsTo(relation: "feeType")
    "Получить связанного мембера"
    member: Members @belongsTo(relation: "member")
    "Получить связанную компанию"
    company: Company @belongsTo(relation:"company")
    "Получить связанныую срочность"
    payment_urgency: PaymentUrgency @belongsTo(relation:"paymentUrgency")
    "Статус"
    status: PaymentStatus @belongsTo(relation:"paymentStatus")
    "Получить связанный тип"
    payment_operation_type: OperationType @belongsTo(relation:"paymentOperation")
    "Получить связанный провайдер"
    payment_provider: PaymentProvider @belongsTo(relation:"paymentProvider")
    "Номер платежа"
    payment_number: String
    received_at: DateTimeUtc
    created_at: DateTimeUtc
    updated_at: DateTimeUtc
    "Дата и время выполнения транзакции"
    execution_at: DateTimeUtc
    respondent_fee: RespondentFee @belongsTo(relation:"respondentFee")
    error: String
}

type Sender {
    "Sender name"
    sender_name: String!
}

extend type Query @guard {
    senders: [Sender] @all(builder: "App\\GraphQL\\Builders\\Sender@filter")
    "Получить платеж по ID"
    payment(id: ID @eq): Payments @find
    """
    Получить список платежей
    orderBy: [{ column: ID, order: DESC }] сортировка по ID
    Фильтры по
    hasCompany: {column:NAME,operator:GTE,value:CompanyName} фильтр по имени компании
    hasAccounts: {column:ACCOUNT_ID,operator:GTE,value:AccountNumber} фильтр по account number
    hasOwner: {column:NAME,operator:GTE,value:MemberName} фильтр по владельцу
    """
    payments(
        filter: _ @filterConditions(static: QueryPaymentsFilterStatic),
        AccountNumber: Sort @scope(name:"AccountNumber"),
        created_at: DateRange @whereBetween,
        orderBy: _ @orderBy(columns: ["id", "created_at", "amount", "fee", "payment_number"])
    ): [Payments!]!   @paginate(defaultCount: 10) @orderBy(column: "id", direction: ASC)
}

input QueryPaymentsFilterStatic @spread{
    id: ID @eq
    company_id: ID @eq
    payment_provider_id: ID @eq
    operation_type_id: ID @eq
    urgency_id: ID @eq
    status_id: ID @eq
    sender_name: String @ilike
    hasAccountFilterByAccountNumber: String @ilike
}

extend type Mutation @guard {
    "Создать платеж"
    createPayment(
        "Аккаунт"
        account_id: ID!
        "Валюта"
        currency_id: ID!
        price_list_fees_id: ID!
        recipient_account: String!
        recipient_bank_name: String!
        recipient_bank_address: String!
        recipient_bank_swift: String!
        recipient_bank_country_id: ID!
        beneficiary_name: String!
        beneficiary_state: String!
        beneficiary_country_id: ID!
        beneficiary_address: String!
        beneficiary_city: String!
        beneficiary_zip: String!
        beneficiary_additional_data: JSON
        "Сумма"
        amount: Decimal! @rules(apply: ["required", "gt:0"])
        amount_real: Decimal
        fee: Decimal
        "Комиссия"
        fee_type_id: ID!
        "Срочность"
        urgency_id: ID!
        "Тип"
        operation_type_id: ID!
        "Платежный ровайдер"
        payment_provider_id: ID!
        respondent_fees_id: ID!
        "Компания"
        company_id: ID!
        execution_at: DateTimeUtc
    ):Payments   @field(resolver: "PaymentsMutator@create")

    "Редактировать платеж"
    updatePayment(
        id: ID!
        "Статус"
        status_id: ID!
    ):Payments   @field(resolver: "PaymentsMutator@update")

    "Удалить платеж"
    deletePayment(
        id: ID!
    ): Payments   @delete
}
