"""
Платежи
Banking -> Payments List
"""
type Payments {
    id: ID!
    "Сумма"
    amount: Float!
    amount_real: Float!
    "Комиссия"
    fee: Float
    fee_type: FeeType @belongsTo(relation: "feeType")
    "Получить связанную валюту"
    currency: Currencies @belongsTo(relation:"Currencies")
    "Статус"
    status: PaymentStatus @belongsTo(relation:"paymentStatus")
    "Имя отправителя"
    sender_name: String
    "Детали платежа"
    payment_details: String
    "Аккаунт банка отправителя"
    sender_bank_account: String
    "SWIFT отправителя"
    sender_swift: String
    "Имя банка отправителя"
    sender_bank_name: String
    "Страна банка отправителя"
    sender_bank_country: Country @belongsTo(relation:"Country")
    "Адрес банка отправителя"
    sender_bank_address: String
    "Страна отправителя"
    sender_country_id: Country @belongsTo(relation:"Country")
    "Адрес отправителя"
    sender_address: String
    "Получить связанныую срочность"
    payment_urgency: PaymentUrgency @belongsTo(relation:"PaymentUrgency")
    "Получить связанный тип"
    payment_type: PaymentTypes @belongsTo(relation:"PaymentTypes")
    "Получить связанный провайдер"
    payment_provider: PaymentProvider @belongsTo(relation:"PaymentProvider")
    "Получить связанный аккаунт"
    account: Accounts @belongsTo(relation:"Accounts")
    "Получить связанную компанию"
    company: Companies @belongsTo(relation:"Companies")
    "Номер платежа"
    payment_number: String
    created_at: DateTime
    updated_at: DateTime
    "Получить связанного мембера"
    member: Members @belongsTo(relation: "member")
    "Получить владельца"
    owner: [ApplicantIndividual] @belongsToMany(relation: "owner")
    #    "Получить компанию ownera"
    #    company: [ApplicantCompany] @belongsToMany(relation: "company")
    received_at: DateTime
    error: String
    sender_additional_fields: JSON
}


type Sender {
    "Sender name"
    sender_name: String!
}

extend type Query @guard {
    senders: [Sender] @all(builder: "App\\GraphQL\\Builders\\Sender@filter")
    "Получить платеж по ID"
    payment(id: ID @eq): Payments @find
    """
    Получить список платежей
    orderBy: [{ column: ID, order: DESC }] сортировка по ID
    Фильтры по
    hasCompany: {column:NAME,operator:GTE,value:CompanyName} фильтр по имени компании
    hasAccounts: {column:ACCOUNT_ID,operator:GTE,value:AccountNumber} фильтр по account number
    hasOwner: {column:NAME,operator:GTE,value:MemberName} фильтр по владельцу
    """
    payments(
        hasCompanies: _ @whereHasConditions(columns: ["name"]),
        hasPaymentProvider: _ @whereHasConditions(columns: ["name"]),
        hasAccounts: _ @whereHasConditions(columns: ["account_id"]),
        hasOwner: _ @whereHasConditions(columns: ["fullname"]),
        hasPaymentTypes: _ @whereHasConditions(columns: ["name"]),
        hasPaymentUrgency: _ @whereHasConditions(columns: ["name"]),
        hasPaymentStatus: _ @whereHasConditions(columns: ["name"]),
        AccountNumber: Sort @scope(name:"AccountNumber"),
        created_at: DateRange @whereBetween,
        where: _ @whereConditions(columns: ["sender_bank_account","type_id","urgency_id", "status", "payment_provider_id", "company_id", "account_id", "payment_number", "sender_name"]),
        orderBy: _ @orderBy(columns: ["id", "created_at", "amount", "fee", "payment_number"])
    ): [Payments!]!   @paginate(defaultCount: 10) @orderBy(column: "id", direction: ASC)
}



extend type Mutation @guard {
    "Создать платеж"
    createPayment(
        "Сумма"
        amount: Float!
        "Сумма реального зачисления"
        amount_real: Float
        "Комиссия"
        fee: Float
        fee_type_id: ID!
        "Валюта"
        currency_id: ID!
        "Статус"
        status_id: ID!
        "Имя отправителя"
        sender_name: String!
        "Детали платежа"
        payment_details: String!
        "Аккаунт банка отправителя"
        sender_bank_account: String!
        "SWIFT отправителя"
        sender_swift: String
        "Имя банка отправителя"
        sender_bank_name: String!
        "Страна банка отправителя"
        sender_bank_country: ID
        "Адрес банка отправителя"
        sender_bank_address: String
        "Страна отправителя"
        sender_country_id: ID
        "Адрес отправителя"
        sender_address: String
        "Срочность"
        urgency_id: ID!
        "Тип"
        type_id: ID!
        "Платежный ровайдер"
        payment_provider_id: ID!
        "Аккаунт"
        account_id: ID!
        "Компания"
        company_id: ID!
        "Номер платежа"
        payment_number: String!
        "Error"
        error: String
        created_at: DateTime
        updated_at: DateTime
        received_at: DateTime
    ):Payments   @field(resolver: "PaymentsMutator@create")

    "Редактировать платеж"
    updatePayment(
        id: ID!
        "Сумма"
        amount: Float
        "Комиссия"
        fee: Float
        "Валюта"
        currency: ID
        "Статус"
        status: Int
        "Имя отправителя"
        sender_name: String
        "Детали платежа"
        payment_details: String
        "Аккаунт банка отправителя"
        sender_bank_account: String
        "SWIFT отправителя"
        sender_swift: String
        "Имя банка отправителя"
        sender_bank_name: String
        "Страна банка отправителя"
        sender_bank_country: ID
        "Адрес банка отправителя"
        sender_bank_address: String
        "Страна отправителя"
        sender_country: ID
        "Адрес отправителя"
        sender_address: String
        "Срочность"
        urgency_id: ID!
        "Тип"
        type_id: ID!
        "Платежный ровайдер"
        payment_provider_id: ID
        "Аккаунт"
        account_id: ID
        "Компания"
        company_id: ID
        "Номер платежа"
        payment_number: String
    ):Payments   @field(resolver: "PaymentsMutator@update")

    "Удалить платеж"
    deletePayment(
        id: ID!
    ): Payments   @delete
}
