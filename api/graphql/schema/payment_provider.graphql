"""
Платежные провайдеры
Banking -> Payment Providers
"""
type PaymentProvider {
    id: ID!
    "Название провайдера"
    name: String!
    "Описание провайдера"
    description: String
    "Лого"
    logo: Files @belongsTo(relation: "logo")
    "Активен или нет"
    is_active: Boolean
    "Получить связанные платежные системы"
    payment_systems: [PaymentSystem] @hasMany(relation:"paymentSystems")
    commission_price_list: CommissionPriceList @hasOne(relation:"commissionPriceList")
    company: Company @belongsTo(relation:"company")
}

extend type Query @guard {
    "Получить провайдер по ID"
    paymentProvider(id: ID @eq): PaymentProvider   @find
    """
    Получить список провайдеров
    paymentProviderCountry: country_id - получить все провайдеры по стране
    paymentProviderCurrency: currency_id - получить все провайдеры по валюте
    orderBy: [{ column: ID, order: DESC }] сортировка ID, NAME, IS_ACTIVE
    where:{column: NAME, operator: EQ, value: ""} фильтр по name
    hasPaymentSystems: {column:NAME,operator:GTE,value:PaymentSystemName} фильтр по платежным системам
    """
    paymentProviders(
        trashed: Trashed @trashed
        filter: _ @filterConditions(static: QueryPaymentProvidersFilterStatic),
        orderBy: _ @orderBy(columns: ["id","name","is_active"])
    ): [PaymentProvider!]!   @paginate(defaultCount: 10) @orderBy(column: "id", direction: ASC) @softDeletes
}

input QueryPaymentProvidersFilterStatic @spread{
    name: String @eq @ilike
    hasPaymentSystemsFilterById: ID @eq
    hasAccountFilterById: ID @eq
    hasCommissionTemplateFilterById: ID @eq
    company_id: ID @eq
    id: ID @eq
    hasCountriesFilterById: ID @eq
    hasCurrenciesFilterById: ID @eq
}

input InputPaymentProvider {
    "Название провайдера"
    name: String!
    "Описание провайдера"
    description: String
    "Лого"
    logo_id: ID
    "Активен или нет"
    is_active: Boolean
    "Ид компании"
    company_id: ID!
    "массив ID платежных систем"
    payment_systems: [ID]
}

extend type Mutation @guard {
    "Создать платежный провайдер"
    createPaymentProvider(
        input: InputPaymentProvider! @spread
    ):PaymentProvider   @field(resolver: "PaymentProviderMutator@create")

    "Обновить поля платежного провайдера"
    updatePaymentProvider(
        id: ID!
        input: InputPaymentProvider! @spread
    ):PaymentProvider   @field(resolver: "PaymentProviderMutator@update")

    "Удалить платежный провайдер"
    deletePaymentProvider(id: ID!): PaymentProvider   @delete

}
