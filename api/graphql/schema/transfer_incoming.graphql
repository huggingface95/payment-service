"""
Исходящие переводы
"""
type TransferIncoming {
    id: ID!
    "Сумма"
    amount: Decimal!
    amount_debt: Decimal!
    "Коммиссия"
    fee: Fee @hasOne(realtion: "fee")
    "Все коммиссии"
    fees: [Fee] @hasMany(realtion: "fees")
    "Файлы"
    files: [Files] @belongsToMany(realtion: "files")
    "Получить связанную валюту"
    currency: Currencies @belongsTo(relation: "currency")
    "Статус"
    status: PaymentStatus @belongsTo(relation: "paymentStatus")
    "Получить связанную срочность"
    payment_urgency: PaymentUrgency @belongsTo(relation: "paymentUrgency")
    "Получить связанный тип"
    payment_operation_type: OperationType @belongsTo(relation: "paymentOperation")
    "Получить связанный провайдер"
    payment_provider: PaymentProvider @belongsTo(relation: "paymentProvider")
    "Получить связанную информацию по провайдеру"
    payment_provider_history: PaymentProviderHistory @hasOne(relation: "paymentProviderHistory")
    "Получить связанную платежную систему"
    payment_system: PaymentSystem @belongsTo(relation: "paymentSystem")
    "Получить связанный банк"
    payment_bank: PaymentBank @belongsTo(relation: "paymentBank")
    "Номер платежа"
    payment_number: String!
    "Получить связанный тип трансфера"
    transfer_type: TypeOfTransfer @belongsTo(relation: "transferType")
    "Получить связанный аккаунт"
    account: Account @belongsTo(relation: "account")
    "Получатьль платежа (Индивидуал или Компани)"
    recipient: Client @morphTo(relation: "recipient")
    "Получить связанную компанию"
    company: Company @belongsTo(relation: "company")
    system_message: String
    reason: String
    channel: String
    bank_message: String
    "Номер счета или IBAN отправителя"
    sender_account: String
    "Название банка отправителя"
    sender_bank_name: String
    "Адрес банка отправителя"
    sender_bank_address: String
    "SWIFT банка отправителя"
    sender_bank_swift: String
    "Страна банка отправителя"
    sender_bank_country: Country @belongsTo(relation: "senderBankCountry")
    "Имя отправителя"
    sender_name: String
    "Страна отправителя"
    sender_country: Country @belongsTo(relation: "senderCountry")
    "Город отправителя"
    sender_city: String
    "Адрес отправителя"
    sender_address: String
    "Штат отправителя"
    sender_state: String
    "Почтовый индекс отправителя"
    sender_zip: String
    respondent_fee: RespondentFee @belongsTo(relation: "respondentFee")
    "SWIFT field 56A (Intermediary Bank)"
    transfer_swift: TransferSwift @hasOne(relation: "transferSwift")
    "Дата и время выполнения транзакции"
    execution_at: DateTimeUtc
    "Дата и время создания"
    created_at: DateTimeUtc
    "Дата и время обновления"
    updated_at: DateTimeUtc
}

type TransferIncomingStatistic {
    status_id: ID!
    name: String!
    count: Int!
}

extend type Query @guard {
    """
    Получить трансфер
    """
    transferIncoming(id: ID! @eq): TransferIncoming!    @find

    """
    Получить список входящих платежей
    """
    transferIncomings(
        filter: _ @filterConditions(static: QueryTransferIncomingsFilterStatic),
        created_at: DateTimeRange @whereBetween
    ): [TransferIncoming!]!
        @paginate(defaultCount: 10)
        @orderBy(column: "id", direction: ASC)

    """
    Получить статистику по входящим платежам
    """
    transferIncomingsStatistic(
        created_at: DateTimeRange @whereBetween
        company_id: ID
        payment_provider_id: ID
        account_id: ID
    ): [TransferIncomingStatistic]
        @field(resolver: "TransferIncomingQuery@statistic")
}

input QueryTransferIncomingsFilterStatic @spread {
    id: ID @eq
    urgency_id: ID @eq
    operation_type_id: ID @eq
    sender_name: String @ilike
    status_id: ID @eq
    hasAccountFilterByAccountNumber: String @ilike
    hasFeeFilterByFee: String @ilike
    hasFeeFilterByFeeAmount: String @ilike
}

extend type Mutation @guard {
    """
    Создать входящий перевод
    """
    createTransferIncoming(
        "ID компании"
        company_id: ID!
        "ID группы"
        group_id: ID!
        "ID типа группы"
        group_type_id: ID!
        "ID проекта"
        project_id: ID!
        "Сумма"
        amount: Decimal!
        "ID валюты"
        currency_id: ID!
        "ID аккаунта"
        account_id: ID!
        "ID платежного провайдера"
        payment_provider_id: ID!
        "ID платежной системы"
        payment_system_id: ID!
    " requested_by_id: ID! ?? "
        price_list_id: ID!
        price_list_fee_id: ID!
        "Номер счета или IBAN отправителя"
        sender_account: String
        "Название банка отправителя"
        sender_bank_name: String
        "Адрес банка отправителя"
        sender_bank_address: String
        "SWIFT банка отправителя"
        sender_bank_swift: String
        "ID страны банка отправителя"
        sender_bank_country_id: ID
        "Имя отправителя"
        sender_name: String
        "ID страны отправителя"
        sender_country_id: ID
        "Город отправителя"
        sender_city: String
        "Адрес отправителя"
        sender_address: String
        "Штат отправителя"
        sender_state: String
        "Почтовый индекс отправителя"
        sender_zip: String
        "Сообщение банка"
        bank_message: String
        "ID файлов"
        file_id: [ID]
        "SWIFT field 56A (Intermediary Bank)"
        transfer_swift: TransferSwiftInput
    ): TransferOutgoing
        @field(resolver: "TransferIncomingMutator@create")
    
    """
    Редактировать входящий перевод
    """
    updateTransferIncoming(
        "ID"
        id: ID!
        "Статус"
        status_id: Int!
    ): TransferIncoming
        @field(resolver: "TransferIncomingMutator@update")
}