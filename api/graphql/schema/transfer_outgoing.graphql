"""
Исходящие переводы
"""
type TransferOutgoing {
    id: ID!
    "Получить инициатора платежа (Мембер или Апликант)"
    requested_by: Clientable @morphTo(relation: "clientable")
    "Тип инициатора платежа"
    user_type: UserType
    "Сумма"
    amount: Decimal!
    amount_debt: Decimal!
    "Коммиссия"
    fee: Fee @hasOne(realtion: "fee")
    "Все коммиссии"
    fees: [Fee] @hasMany(realtion: "fees")
    "Файлы"
    files: [Files] @belongsToMany(realtion: "files")
    "Получить связанную валюту"
    currency: Currencies @belongsTo(relation: "currency")
    "Статус"
    status: PaymentStatus @belongsTo(relation: "paymentStatus")
    "Получить связанныую срочность"
    payment_urgency: PaymentUrgency @belongsTo(relation: "paymentUrgency")
    "Получить связанный тип"
    payment_operation_type: OperationType @belongsTo(relation: "paymentOperation")
    "Получить связанный провайдер"
    payment_provider: PaymentProvider @belongsTo(relation: "paymentProvider")
    "Получить связанную информацию по провайдеру"
    payment_provider_history: PaymentProviderHistory @hasOne(relation: "paymentProviderHistory")
    "Получить связанную платежную систему"
    payment_system: PaymentSystem @belongsTo(relation: "paymentSystem")
    "Получить связанный банк"
    payment_bank: PaymentBank @belongsTo(relation: "paymentBank")
    "Номер платежа"
    payment_number: String!
    "Получить связанный тип трансфера"
    transfer_type: TypeOfTransfer @belongsTo(relation: "transferType")
    "Получить связанный аккаунт"
    account: Account @belongsTo(relation: "account")
    "Получить отправителя (Индивидуал или Компани)"
    sender: Client @morphTo(relation: "sender")
    "Получить связанную компанию"
    company: Company @belongsTo(relation: "company")
    system_message: String
    reason: String
    channel: String
    bank_message: String
    "Номер счета или IBAN получателя"
    recipient_account: String!
    "Название банка получателя"
    recipient_bank_name: String!
    "Адрес банка получателя"
    recipient_bank_address: String!
    "SWIFT код банка получателя"
    recipient_bank_swift: String
    "Страна банка получателя"
    recipient_bank_country: Country @belongsTo(relation: "recipientBankCountry")
    "Имя получателя"
    recipient_name: String!
    "Страна получателя"
    recipient_country: Country @belongsTo(relation: "recipientCountry")
    "Город получателя"
    recipient_city: String!
    "Адрес получателя"
    recipient_address: String!
    "Штат получателя"
    recipient_state: String!
    "Индекс получателя"
    recipient_zip: String!
    respondent_fee: RespondentFee @belongsTo(relation: "respondentFee")
    "SWIFT field 56A (Intermediary Bank)"
    transfer_swift: TransferSwift @hasOne(relation: "transferSwift")
    "Дата и время выполнения транзакции"
    execution_at: DateTimeUtc
    "Дата и время создания"
    created_at: DateTimeUtc
    "Дата и время обновления"
    updated_at: DateTimeUtc
}

type TypeOfTransfer {
    id: ID!
    name: String!
}

type TransferOutgoingStatistic {
    status_id: ID!
    name: String!
    count: Int!
}

enum UserType {
    ApplicantIndividual @enum(value: "ApplicantIndividual")
    ApplicantCompany @enum(value: "ApplicantCompany")
    Members @enum(value: "Members")
}

enum ExportFileType {
    Pdf @enum(value: "Pdf")
    Xls @enum(value: "Xls")
    Csv @enum(value: "Csv")
}

extend type Query @guard {
    """
    Получить трансфер
    """
    transferOutgoing(id: ID! @eq): TransferOutgoing!    @find

    """
    Получить список исходящих платежей
    """
    transferOutgoings(
        filter: _ @filterConditions(static: QueryTransferOutgoingsFilterStatic)
        created_at: DateTimeRange @whereBetween
    ): [TransferOutgoing!]!
        @paginate(defaultCount: 10)
        @orderBy(column: "id", direction: ASC)

    """
    Получить статистику по исходящим платежам
    """
    transferOutgoingsStatistic(
        created_at: DateTimeRange @whereBetween
        company_id: ID
        payment_provider_id: ID
        account_id: ID
    ): [TransferOutgoingStatistic]
        @field(resolver: "TransferOutgoingQuery@statistic")

    """
    Получить выписку по исходящим трансферам
    """
    downloadTransferOutgoings(
        type: ExportFileType!
        filter: _ @filterConditions(static: QueryTransferOutgoingsFilterStatic)
        created_at: DateTimeRange @whereBetween
    ): RawFile
        @downloadFileWithConditions(model: "TransferOutgoing")

    """
    Получить детали исходящего трансфера
    """
    downloadTransferOutgoingDetails(
        "ID трансфера"
        id: ID!
        "Тип файла"
        type: ExportFileType!
    ): RawFile
        @field(resolver: "TransferOutgoingQuery@downloadDetails")
}

input QueryTransferOutgoingsFilterStatic @spread {
    id: ID @eq
    urgency_id: ID @eq
    operation_type_id: ID @eq
    status_id: ID @eq
    recipient_name: String @ilike
    user_type: UserType @eq
    hasAccountFilterByAccountNumber: String @ilike
    hasSenderMixedNameOrFullname: Mixed @ilike
    hasFeeFilterByFee: String @ilike
    hasFeeFilterByFeeAmount: String @ilike
}

input QueryDownloadTransferOutgoingsFilterStatic @spread {
    id: ID @eq
    urgency_id: ID @eq
    operation_type_id: ID @eq
    status_id: ID @eq
    recipient_name: String @ilike
    user_type: UserType @eq
    hasAccountFilterByAccountNumber: String @ilike
    hasSenderMixedNameOrFullname: Mixed @ilike
    hasFeeFilterByFee: String @ilike
    hasFeeFilterByFeeAmount: String @ilike
}

extend type Mutation @guard {
    """
    Создать исходящий перевод
    """
    createTransferOutgoing(
        "ID компании"
        company_id: ID!
        "ID группы"
        group_id: ID!
        "ID типа группы"
        group_type_id: ID!
        "ID проекта"
        project_id: ID!
        "Сумма"
        amount: Decimal!
        "ID валюты"
        currency_id: ID!
        "ID аккаунта"
        account_id: ID!
        "ID платежного провайдера"
        payment_provider_id: ID!
        "ID платежной системы"
        payment_system_id: ID!
        "ID страны банка получателя"
        recipient_bank_country_id: ID!
        requested_by_id: ID!
        price_list_id: ID!
        "ID коммиссии"
        price_list_fee_id: ID!
        "ID срочности операции"
        urgency_id: ID!
        "Исполнить в"
        execution_at: DateTimeUtc
        "Номер счета или IBAN получателя"
        recipient_account: String
        "Имя банка получателя"
        recipient_bank_name: String
        "Адрес банка получателя"
        recipient_bank_address: String
        "SWIFT банка получателя"
        recipient_bank_swift: String
        "Имя получателя"
        recipient_name: String
        "Город получателя"
        recipient_city: String
        "Адрес получателя"
        recipient_address: String
        "Штат получателя"
        recipient_state: String
        "Индекс получателя"
        recipient_zip: String
        "Сообщение банка"
        bank_message: String
        "ID файлов"
        file_id: [ID]
        "SWIFT field 56A (Intermediary Bank)"
        transfer_swift: TransferSwiftInput
    ): TransferOutgoing
        @field(resolver: "TransferOutgoingMutator@create")

    """
    Редактировать исходящий перевод
    """
    updateTransferOutgoing(
        "ID"
        id: ID!
        "Статус"
        status_id: Int!
    ): TransferOutgoing
        @field(resolver: "TransferOutgoingMutator@update")

    """
    Подписать исходящий перевод
    """
    signTransferOutgoing(
        "ID"
        id: ID!
    ): TransferOutgoing
        @field(resolver: "TransferOutgoingMutator@sign")

    """
    Отправить исходящий перевод
    """
    sendTransferOutgoing(
        "ID"
        id: ID!
    ): TransferOutgoing
        @field(resolver: "TransferOutgoingMutator@send")
}